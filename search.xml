<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0x01ichunqiu逆向刷题</title>
    <url>/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h4 id="ichunqiu逆向刷题"><a href="#ichunqiu逆向刷题" class="headerlink" title="ichunqiu逆向刷题"></a>ichunqiu逆向刷题</h4><a id="more"></a>

<h5 id="1、小菜一碟：re100"><a href="#1、小菜一碟：re100" class="headerlink" title="1、小菜一碟：re100"></a>1、小菜一碟：re100</h5><p>下载后，不知道是什么文件，用Notepad先看下</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201009173852508.png" alt="image-20201009173852508"></p>
<p>发现关键字符：AndroidManifest.xml</p>
<p>改后缀名为apk，在模拟器中运行看看</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201009174041684.png" alt="image-20201009174041684"></p>
<p>猜测是输入flag后会有成功的弹窗之类的</p>
<p>放到Androidkiller里看看</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201009173927463.png" alt="image-20201009173927463"></p>
<p>反编译成功，查看一些关键性字符，找到”success”</p>
<p>查看java源码，分析</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201009174441430.png" alt="image-20201009174441430"></p>
<p>查看encode加密代码，是md5</p>
<p>所以将字符串”NzU2ZDJmYzg0ZDA3YTM1NmM4ZjY4ZjcxZmU3NmUxODk=”先base64解码，然后Md5解密，然后翻转一下，即可获得flag:jlflag{admin123}</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201009174409777.png" alt="image-20201009174409777"></p>
<h5 id="2、Classical-CrackMe"><a href="#2、Classical-CrackMe" class="headerlink" title="2、Classical CrackMe"></a>2、Classical CrackMe</h5><p>是一个exe文件，提示是注册码就是flag，打开运行</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201009174631889.png" alt="image-20201009174631889"></p>
<p>猜测会出现”注册成功”的弹窗</p>
<p>放入IDA中，寻找关键字，分析</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201009174832915.png" alt="image-20201009174832915"></p>
<p>即可找到对应的字符串，这个编码方式，用base64解码，即可得到flag</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201009174917940.png" alt="image-20201009174917940"></p>
<h5 id="3、FindKey-pyc"><a href="#3、FindKey-pyc" class="headerlink" title="3、FindKey-.pyc"></a>3、FindKey-.pyc</h5><p>下载文件，不知道是什么文件，用notepad打开看，能看到有关键字，但是感觉也没有明显特征能说明是什么文件，开始各种猜测</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201110112824228.png" alt="image-20201110112824228"></p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201110112848494.png" alt="image-20201110112848494"></p>
<p>猜了一会儿，后缀名改成.py后能运行了，但是无法直接分析这个.py文件，猜测是加密了</p>
<p>将后缀改成.pyc，使用easy python decompiler反编译，成功，得到一个findkey.pyc_dis文件</p>
<p>打开后可以看到正常的Python代码，Pwda,lookup和pwdb是三个数组，分析</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201009175704669.png" alt="image-20201009175704669"></p>
<p>编写一个脚本，思路：</p>
<p>一开始是想随机生成一个长度为17的字符串，然后把这个字符串用判定条件进行判定</p>
<p>但是后来觉得这样跑起来比较复杂费时并且存在一些问题</p>
<p>转换思路：将常用的字符列成数组，根据判定条件跑出每一个字符，最后组成字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">chars &#x3D; [&#39;A&#39;, &#39;a&#39;, &#39;B&#39;, &#39;b&#39;, &#39;C&#39;, &#39;c&#39;, &#39;D&#39;, &#39;d&#39;, &#39;E&#39;, &#39;e&#39;, &#39;F&#39;, &#39;f&#39;, &#39;G&#39;, &#39;g&#39;,</span><br><span class="line">         &#39;H&#39;, &#39;h&#39;, &#39;I&#39;, &#39;i&#39;, &#39;J&#39;, &#39;j&#39;, &#39;K&#39;, &#39;k&#39;, &#39;L&#39;, &#39;l&#39;, &#39;M&#39;, &#39;m&#39;, &#39;N&#39;, &#39;n&#39;, &#39;O&#39;, &#39;o&#39;, &#39;P&#39;, &#39;p&#39;, &#39;Q&#39;, &#39;q&#39;,</span><br><span class="line">         &#39;R&#39;, &#39;r&#39;, &#39;S&#39;, &#39;s&#39;, &#39;T&#39;, &#39;t&#39;, &#39;U&#39;, &#39;u&#39;, &#39;V&#39;, &#39;v&#39;, &#39;W&#39;, &#39;w&#39;, &#39;X&#39;, &#39;x&#39;, &#39;Y&#39;,</span><br><span class="line">         &#39;y&#39;, &#39;Z&#39;, &#39;z&#39;, &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;-&#39;, &#39;_&#39;, &#39;(&#39;, &#39;)&#39;, &#39;&#123;&#39;, &#39;&#125;&#39;]</span><br><span class="line">for i in range(0, 17):</span><br><span class="line">    for t in range(0, 68):</span><br><span class="line">        m &#x3D; chars[t]</span><br><span class="line">        if ord(m) + pwda[i] &amp; 255 &#x3D;&#x3D; lookup[i + pwdb[i]]:</span><br><span class="line">            flag +&#x3D; m</span><br><span class="line"></span><br><span class="line">flag &#x3D; flag[::-1]</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>

<p>成功跑出flag：PCTF{PyC_Cr4ck3r}</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201009180535166.png" alt="image-20201009180535166"></p>
<h5 id="4、crackme-Python编写异或"><a href="#4、crackme-Python编写异或" class="headerlink" title="4、crackme-Python编写异或"></a>4、crackme-Python编写异或</h5><p>下载文件，运行，发现有特殊字符”flag”</p>
<p>放到IDA里查看</p>
<p>发现能反编译的代码很少，怀疑加壳</p>
<p>查壳，加了ns的壳，搜索一下是北斗的壳，用脱壳机脱了即可</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201010140519865.png" alt="image-20201010140519865"></p>
<p>重新放到IDA中</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201010140526805.png" alt="image-20201010140526805"></p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201010140559743.png" alt="image-20201010140559743"></p>
<p>看到重点代码，编写脚本即可跑出flag</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201010140639734.png" alt="image-20201010140639734"></p>
<p><img src="/Users/kami/Desktop/%E7%AC%94%E8%AE%B0/%E9%80%86%E5%90%91/CTF%E9%80%86%E5%90%91%E9%A2%98/typora-user-images/image-20201010140648427.png" alt="image-20201010140648427"></p>
<p>编写脚本过程中的问题：</p>
<p>一开始是想使用上次一样的方法，遍历flag字符然后按照原代码进行异或操作，但是由于对异或运算不了解和Python编写不熟，一直跑不出</p>
<p>此题注意：</p>
<p>异或运算：a^b^a=b,a^b=b^a,a^a=0,a^0=a</p>
<p>Python编写异或，ord(),chr(),十六进制的数组方式</p>
<p>可以直接用两个数组异或得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">byte_402130 &#x3D; &#39;this_is_not_flag&#39;</span><br><span class="line">dword_402150 &#x3D; [0x12, 0x4, 0x8, 0x14, 0x24, 0x5C, 0x4A, 0x3D, 0x56, 0x0A, 0x10, 0x67,</span><br><span class="line">                0x0, 0x41, 0x0, 0x1, 0x46, 0x5A, 0x44, 0x42, 0x6E, 0x0C, 0x44, 0x72, 0x0C, 0x0D, 0x40, 0x3E, 0x4B, 0x5F, 0x2, 0x1,</span><br><span class="line">                0x4C, 0x5E, 0x5B, 0x17, 0x6E, 0x0C, 0x16, 0x68, 0x5B, 0x12]</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in range(0, 42):</span><br><span class="line">    flag +&#x3D; chr(ord(byte_402130[i % 16]) ^ dword_402150[i])</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>

<p>跑出得到flag{59b8ed8f-af22-11e7-bb4a-3cf862d1ee75}</p>
<h5 id="5、CrackMe01-postmessagew"><a href="#5、CrackMe01-postmessagew" class="headerlink" title="5、CrackMe01-postmessagew"></a>5、CrackMe01-postmessagew</h5><p>查壳，无壳</p>
<p>放到IDA里查看，未搜到关键字，运行，发现有输入框，查看关键函数（如getwindowtext等</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012171116868.png" alt="image-20201012171116868"></p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012171141100.png" alt="image-20201012171141100"></p>
<p>查找主要代码sub_402650（调用了sub_418B95</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012171248771.png" alt="image-20201012171248771"></p>
<p>发现postmessagew函数，在这里可以查看各种函数的定义：<a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postmessagew">https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postmessagew</a></p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012171342573.png" alt="image-20201012171342573"></p>
<p>postmessagew有四个参数，动态跑一下看看四个参数分别代表什么</p>
<p>动态跑程序时，在getwindowtextw处下断点，然后F8单步运行，跳到Postmessagew时将鼠标放到对应参数上即可看到</p>
<p>lParam:输入字符的个数</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012171443991.png" alt="image-20201012171443991"></p>
<p>wParam:输入的字符</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012171449452.png" alt="image-20201012171449452"></p>
<p>查看句柄hWnd:</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012172152822.png" alt="image-20201012172152822"></p>
<p>除了sub_402650调用以外，还有一个sub_402990函数</p>
<p>跟进去看看</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012172232914.png" alt="image-20201012172232914"></p>
<p>查看调用的函数sub_4027F0</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012172309659.png" alt="image-20201012172309659"></p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012172405031.png" alt="image-20201012172405031"></p>
<p>查看chText数组</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012172330350.png" alt="image-20201012172330350"></p>
<p>注意：是两个字节一起</p>
<p>编写脚本：</p>
<p>final = 0x4B6<br>chText = [0x4F0, 0x4DA, 0x4D7, 0x4D1, 0x48C, 0x4FF, 0x4F5, 0x4FE, 0x4E3, 0x4F8, 0x4E7, 0x4FF, 0x4E3, 0x4E9,<br>          0x4F0, 0x4F3, 0x425, 0x480, 0x484, 0x4F2, 0x4F4, 0x4F3]<br>for i in range(0, 22):<br>            v6 = chr(chText[i] ^ final)<br>            print(v6, end=’’)</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201110114140386.png" alt="image-20201110114140386"></p>
<p>得到flag:ICHUNQIU_FE362DBE</p>
<p>参考：<a href="https://blog.csdn.net/wangtiankuo/article/details/81201853">https://blog.csdn.net/wangtiankuo/article/details/81201853</a></p>
<p><a href="https://www.cnblogs.com/wanghj-dz/p/3973543.html">https://www.cnblogs.com/wanghj-dz/p/3973543.html</a></p>
<p><a href="https://www.cnblogs.com/qq78292959/archive/2012/07/20/2600865.html">https://www.cnblogs.com/qq78292959/archive/2012/07/20/2600865.html</a></p>
<h5 id="6、Smali-smali2java"><a href="#6、Smali-smali2java" class="headerlink" title="6、Smali-smali2java"></a>6、Smali-smali2java</h5><p>下载了一个smali文件，根据搜索，可以将Smali文件转成Java,利用软件smali2java转为java文件</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012173233305.png" alt="image-20201012173233305"></p>
<p>可以看到是一个base64+AES的解密过程</p>
<p>p1是加密的内容，p2是AES密钥</p>
<p>参考：<a href="https://www.cnblogs.com/caizhaokai/p/10944667.html">https://www.cnblogs.com/caizhaokai/p/10944667.html</a></p>
<p>一开始直接解p1的base64，没解出来，然后p1p2都放到AES解密，也没解出来</p>
<p>就想要直接运行java程序跑的，发现有很多包的问题</p>
<p>然后解了一下p2的base64，出了明文</p>
<p>然后放到AES里解密</p>
<p>成功解出flag：PCTF{Sm4liRiver}</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201012164303217.png" alt="image-20201012164303217"></p>
<h5 id="7、小菜两碟-PE文件头修复"><a href="#7、小菜两碟-PE文件头修复" class="headerlink" title="7、小菜两碟-PE文件头修复"></a>7、小菜两碟-PE文件头修复</h5><p>一个无法正常打开的文件，用editor看一下，查找到关键字</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201013162905495.png" alt="image-20201013162905495"></p>
<p>尝试多种猜测后，应该是个exe，但是无法正常打开，怀疑PE头损坏</p>
<p>参考：<a href="https://www.cnblogs.com/2f28/p/9824366.html">https://www.cnblogs.com/2f28/p/9824366.html</a></p>
<p><a href="https://bbs.pediy.com/thread-248817.htm">https://bbs.pediy.com/thread-248817.htm</a></p>
<p>并打开一个正常的exe文件进行对比</p>
<p>发现两处错误，50450000是PE文件头，3C处是PE文件头地址（E9）</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201013163053400.png" alt="image-20201013163053400"></p>
<p>修改为如下情况：</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201013163105139.png" alt="image-20201013163105139"></p>
<p>修改之后可以正常放入IDA中分析了，无壳</p>
<p>根据关键字，找到主函数代码，反编译一下，分析</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201013163410920.png" alt="image-20201013163410920"></p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201013163418420.png" alt="image-20201013163418420"></p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201013163442850.png" alt="image-20201013163442850"></p>
<p>可以看到flag是由前三个数字加上’abc’组成的，即v20,21,22</p>
<p>编写脚本跑出前三个数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for v20 in range(0, 100):</span><br><span class="line">    for v21 in range(0, 100):</span><br><span class="line">        v22 &#x3D; (v21 ^ v20) + 4</span><br><span class="line">        if(v22 * v21 * v20 &#x2F;&#x2F; 11 &#x3D;&#x3D; 106):</span><br><span class="line">           if((v22 + v21 + v20) % 100 &#x3D;&#x3D; 34):</span><br><span class="line">                print(v20, v21, v22)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201013133507441.png" alt="image-20201013133507441"></p>
<p>然后一个个尝试即可</p>
<p><img src="/2020/10/09/0x01ichunqiu%E9%80%86%E5%90%91%E5%88%B7%E9%A2%98/image-20201013163550796.png" alt="image-20201013163550796"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>PE文件头修复</tag>
        <tag>.pyc文件</tag>
        <tag>smali2java</tag>
      </tags>
  </entry>
  <entry>
    <title>0x01python-spider-exploit-db</title>
    <url>/2020/12/03/0x01python-spider-exploit-db/</url>
    <content><![CDATA[<p>在一次寻找大批量的久远漏洞的poc的时候，我这个python小白决定顺手写个exploit-db的爬虫</p>
<a id="more"></a>

<p>这类爬虫的项目其实还是有蛮多可以参考的</p>
<p>我的主要需求：已知cve号，搜索是否有poc并返回poc页面</p>
<p>先进行一次搜索流程</p>
<p>在输入框输入cve号，页面就会显示出链接</p>
<p><img src="/2020/12/03/0x01python-spider-exploit-db/image-20210105144411007.png" alt="image-20210105144411007"></p>
<p>点击后，这个就是我们需要的poc的url：<a href="https://www.exploit-db.com/exploits/49068">https://www.exploit-db.com/exploits/49068</a></p>
<p><img src="/2020/12/03/0x01python-spider-exploit-db/image-20210105144437086.png" alt="image-20210105144437086"></p>
<p>多尝试几个就可以知道poc的url就是”<a href="https://www.exploit-db.com/exploits/+%E6%9F%90%E6%95%B0%E5%AD%97&quot;%EF%BC%8C%E9%82%A3%E4%B9%88%E8%BF%99%E4%B8%AA%E6%9F%90%E6%95%B0%E5%AD%97%E5%B0%B1%E6%98%AF%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E8%BF%94%E5%9B%9E%E7%9A%84">https://www.exploit-db.com/exploits/+某数字&quot;，那么这个某数字就是我们需要返回的</a></p>
<p>抓包，得到请求包，找到对应的cve号输入的位置search[value]，修改为我们可以输入的参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;?draw&#x3D;2&amp;columns[0][data]&#x3D;date_published&amp;columns[0][name]&#x3D;date_published&amp;columns[0][searchable]&#x3D;true&amp;columns[0][orderable]&#x3D;true&amp;columns[0][search][value]&#x3D;&amp;columns[0][search][regex]&#x3D;false&amp;columns[1][data]&#x3D;download&amp;columns[1][name]&#x3D;download&amp;columns[1][searchable]&#x3D;false&amp;columns[1][orderable]&#x3D;false&amp;columns[1][search][value]&#x3D;&amp;columns[1][search][regex]&#x3D;false&amp;columns[2][data]&#x3D;application_md5&amp;columns[2][name]&#x3D;application_md5&amp;columns[2][searchable]&#x3D;true&amp;columns[2][orderable]&#x3D;false&amp;columns[2][search][value]&#x3D;&amp;columns[2][search][regex]&#x3D;false&amp;columns[3][data]&#x3D;verified&amp;columns[3][name]&#x3D;verified&amp;columns[3][searchable]&#x3D;true&amp;columns[3][orderable]&#x3D;false&amp;columns[3][search][value]&#x3D;&amp;columns[3][search][regex]&#x3D;false&amp;columns[4][data]&#x3D;description&amp;columns[4][name]&#x3D;description&amp;columns[4][searchable]&#x3D;true&amp;columns[4][orderable]&#x3D;false&amp;columns[4][search][value]&#x3D;&amp;columns[4][search][regex]&#x3D;false&amp;columns[5][data]&#x3D;type_id&amp;columns[5][name]&#x3D;type_id&amp;columns[5][searchable]&#x3D;true&amp;columns[5][orderable]&#x3D;false&amp;columns[5][search][value]&#x3D;&amp;columns[5][search][regex]&#x3D;false&amp;columns[6][data]&#x3D;platform_id&amp;columns[6][name]&#x3D;platform_id&amp;columns[6][searchable]&#x3D;true&amp;columns[6][orderable]&#x3D;false&amp;columns[6][search][value]&#x3D;&amp;columns[6][search][regex]&#x3D;false&amp;columns[7][data]&#x3D;author_id&amp;columns[7][name]&#x3D;author_id&amp;columns[7][searchable]&#x3D;false&amp;columns[7][orderable]&#x3D;false&amp;columns[7][search][value]&#x3D;&amp;columns[7][search][regex]&#x3D;false&amp;columns[8][data]&#x3D;code&amp;columns[8][name]&#x3D;code.code&amp;columns[8][searchable]&#x3D;true&amp;columns[8][orderable]&#x3D;true&amp;columns[8][search][value]&#x3D;&amp;columns[8][search][regex]&#x3D;false&amp;columns[9][data]&#x3D;id&amp;columns[9][name]&#x3D;id&amp;columns[9][searchable]&#x3D;false&amp;columns[9][orderable]&#x3D;true&amp;columns[9][search][value]&#x3D;&amp;columns[9][search][regex]&#x3D;false&amp;order[0][column]&#x3D;9&amp;order[0][dir]&#x3D;desc&amp;start&#x3D;0&amp;length&#x3D;15&amp;search[value]&#x3D;%s&amp;search[regex]&#x3D;false&amp;author&#x3D;&amp;port&#x3D;&amp;type&#x3D;&amp;tag&#x3D;&amp;platform&#x3D;&amp;_&#x3D;1606893892234&#39;%s</span><br></pre></td></tr></table></figure>

<p>刚开始直接获取的是返回的页面的html，但是没有相关数字的信息，一度以为自己写错了，毕竟这算是我第二次写爬虫。后来查看页面源代码，确实没有相关的信息，跑去问gps(前端，才知道是拿了接口返回的数据，塞到网页里</p>
<p>f12后发现在json数据包里</p>
<p><img src="/2020/12/03/0x01python-spider-exploit-db/image-20210105145116203.png" alt="image-20210105145116203"></p>
<p>于是开始研究怎么获取json包的数据</p>
<p>重点函数：spider_request.json()</p>
<p>但是一开始使用这个函数一直报错，提示没有返回json，确认了下请求头也没有错误</p>
<p><img src="/2020/12/03/0x01python-spider-exploit-db/image-20210105150842464.png" alt="image-20210105150842464"></p>
<p>改了很久，最后将header改为这样就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">header &#x3D; &#123;</span><br><span class="line">    &#39;Accept&#39;: &#39;application&#x2F;json, text&#x2F;javascript, *&#x2F;*; q&#x3D;0.01&#39;,</span><br><span class="line">    &#39;Sec-Fetch-Mode&#39;: &#39;cors&#39;,</span><br><span class="line">    &#39;User-Agent&#39;: random.choice(ua_list),</span><br><span class="line">    &#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>运行效果：</p>
<p><img src="/2020/12/03/0x01python-spider-exploit-db/image-20210105151415897.png" alt="image-20210105151415897"></p>
<p>项目地址：<a href="https://github.com/0xkami/expolit-db-spider">https://github.com/0xkami/expolit-db-spider</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>exploit-db</tag>
      </tags>
  </entry>
  <entry>
    <title>0x02xctf新手训练题</title>
    <url>/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/</url>
    <content><![CDATA[<h4 id="xctf新手训练题"><a href="#xctf新手训练题" class="headerlink" title="xctf新手训练题"></a>xctf新手训练题</h4><a id="more"></a>

<h5 id="0x1-open-source"><a href="#0x1-open-source" class="headerlink" title="0x1 open-source"></a>0x1 open-source</h5><p>下载文件后可以直接看源码</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022173337438.png" alt="image-20201022173337438"></p>
<p>要求是输入4个参数，第一个参数为’0xcafe’，第二个参数是符合判定条件的int值，第三个参数是’h4cky0u’，然后进行一些数据操作得到hash，并用十六进制方式输出（%x）</p>
<p>编写脚本实现，得到flag为0xc0ffee</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201021172112641.png" alt="image-20201021172112641"></p>
<h5 id="0x2-simple-unpack"><a href="#0x2-simple-unpack" class="headerlink" title="0x2 simple-unpack"></a>0x2 simple-unpack</h5><p>提示是加了壳的二进制文件，查壳</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022173809443.png" alt="image-20201022173809443"></p>
<p>一开始不知道怎么脱二进制文件的壳，参考：<a href="https://bbs.pediy.com/thread-157645.htm">https://bbs.pediy.com/thread-157645.htm</a></p>
<p>到软件中提示的地址下载脱壳程序进行脱壳（<a href="https://github.com/upx/upx/releases%EF%BC%89">https://github.com/upx/upx/releases）</a></p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022173853002.png" alt="image-20201022173853002"></p>
<p>脱壳成功后用IDA查看，即得到flag</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022174038951.png" alt="image-20201022174038951"></p>
<h5 id="0x3-logmein"><a href="#0x3-logmein" class="headerlink" title="0x3 logmein"></a>0x3 logmein</h5><p>查看下载的文件</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022174115535.png" alt="image-20201022174115535"></p>
<p>用IDA找到对应关键字进行分析</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022174143070.png" alt="image-20201022174143070"></p>
<p>重点函数：</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201023171541380.png" alt="image-20201023171541380"></p>
<p>编写脚本即可</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201023171351848.png" alt="image-20201023171351848"></p>
<p>注意：小端模式</p>
<h5 id="0x4-insanity"><a href="#0x4-insanity" class="headerlink" title="0x4 insanity"></a>0x4 insanity</h5><p>下载文件后直接编辑器就能查看到flag</p>
<h5 id="0x5-getit"><a href="#0x5-getit" class="headerlink" title="0x5 getit"></a>0x5 getit</h5><p>IDA中反编译</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022174234603.png" alt="image-20201022174234603"></p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022174338459.png" alt="image-20201022174338459"></p>
<p>可以看到t就是flag，我们需要知道？的数值，编写脚本即可得到flag</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022111119084.png" alt="image-20201022111119084"></p>
<p>此题注意：python中字符串是不可以直接操作修改的，可以先改为列表，然后重新生成</p>
<h5 id="0x6-python-trade"><a href="#0x6-python-trade" class="headerlink" title="0x6 python-trade"></a>0x6 python-trade</h5><p>.pyc后缀的文件，直接用EasyPythonDecompiler解了，获得源码</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/24CD274DE2E7A49AC28DC75BFF631FA2.png" alt="24CD274DE2E7A49AC28DC75BFF631FA2"></p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/CF034599DBEAC7285F7E5C9C744EBB6D.png" alt="CF034599DBEAC7285F7E5C9C744EBB6D"></p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/BB56738DB65555D9FF8F1424320439CB.png" alt="BB56738DB65555D9FF8F1424320439CB"></p>
<p>可以看到操作：对输入的字符串进行自定义的encode操作然后用base64加密</p>
<p>编写脚本解码即得flag</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022113051197.png" alt="image-20201022113051197"></p>
<h5 id="0x7-re1"><a href="#0x7-re1" class="headerlink" title="0x7 re1"></a>0x7 re1</h5><p>放进IDA查看</p>
<p>查看主函数，可以看到只要输入的字符串和v5相同就可以了，找到对应v5的值即可得flag</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022183057868.png" alt="image-20201022183057868"></p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022175340918.png" alt="image-20201022175340918"></p>
<h5 id="0x8-Hello-CTF"><a href="#0x8-Hello-CTF" class="headerlink" title="0x8 Hello,CTF"></a>0x8 Hello,CTF</h5><p>用IDA打开，找到主要函数</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022175837176.png" alt="image-20201022175837176"></p>
<p>从下面的循环判定值为17和上面v13的长度为34猜测出两位代表一个字符</p>
<p>十六进制转ASCII即可得flag</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022175959301.png" alt="image-20201022175959301"></p>
<h5 id="0x9-no-string-attached"><a href="#0x9-no-string-attached" class="headerlink" title="0x9 no-string-attached"></a>0x9 no-string-attached</h5><p>IDA中查看主函数</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022180039861.png" alt="image-20201022180039861"></p>
<p>进入每个函数看看</p>
<p>先看banner()</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022180101213.png" alt="image-20201022180101213"></p>
<p>就是打印一些东西，查看对应打印的数值（unk_80488B0和8048960）</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022180251090.png" alt="image-20201022180251090"></p>
<p>可以看到是两个字符串，就是一些欢迎的信息之类的</p>
<p>查看下一个，也是打印一些信息，需要你输入字符串</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022180356018.png" alt="image-20201022180356018"></p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022180449834.png" alt="image-20201022180449834"></p>
<p>再看下一个，是主函数了，只要输入的函数和s2相同即可，s2是两个输入进行decrypt操作后得到的值</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022180527832.png" alt="image-20201022180527832"></p>
<p>看decrypt,对两个宽字节进行了操作。编写脚本实现功能即可得flag</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022180623954.png" alt="image-20201022180623954"></p>
<p> <img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022141847145.png" alt="image-20201022141847145"></p>
<h5 id="0xA-csaw2013reversing2"><a href="#0xA-csaw2013reversing2" class="headerlink" title="0xA csaw2013reversing2"></a>0xA csaw2013reversing2</h5><p>IDA中看主函数</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022180506157.png" alt="image-20201022180506157"></p>
<p>通过运行程序，发现并不会进入if的判定。</p>
<p>lpMem+1就是我们需要知道的乱码消息</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022181008895.png" alt="image-20201022181008895"></p>
<p>可以知道通过memcpy_s操作将unk_409B10的数据给了lpMem</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022181020276.png" alt="image-20201022181020276"></p>
<p>查看sub_401000</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022181112925.png" alt="image-20201022181112925"></p>
<p>是对lpMem进行了一些操作的，猜测是由于并没有运行，所以出现乱码</p>
<p>用IDA动态调试（debugger），下断点</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022181352168.png" alt="image-20201022181352168"></p>
<p>跳过进入判定后的ExitProcess()，直接跳到下面弹出messageboxA的地方，就能得到flag了</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022181317768.png" alt="image-20201022181317768"></p>
<h5 id="0xB-maze"><a href="#0xB-maze" class="headerlink" title="0xB maze"></a>0xB maze</h5><p>看题目就知道是一个迷宫题</p>
<p>IDA中找主函数</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022181455862.png" alt="image-20201022181455862"></p>
<p>看到这四个不同函数的判断，猜测应该就是上下左右了</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022181522773.png" alt="image-20201022181522773"></p>
<p>分别点进去查看，得知’O’为左，’o’为右，’.’为上，’0’为下，并且在函数中有规定了8这个边界值</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022181719854.png" alt="image-20201022181719854"></p>
<p>接下来找迷宫和终点</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022181743142.png" alt="image-20201022181743142"></p>
<p>通过最终判定的条件，可以知道终点是’#’</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022181833592.png" alt="image-20201022181833592"></p>
<p>601060就是需要找的迷宫</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022183115702.png" alt="image-20201022183115702"></p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022183129721.png" alt="image-20201022183129721"></p>
<p>在HEX界面查看</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022181923615.png" alt="image-20201022181923615"></p>
<p>根据边界值8重新排列，23就是终点，只走20即可得flag</p>
<p><img src="/2020/10/23/0x02xctf%E6%96%B0%E6%89%8B%E8%AE%AD%E7%BB%83%E9%A2%98/image-20201022182143651.png" alt="image-20201022182143651"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>0x03Xctf进阶刷题-1</title>
    <url>/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/</url>
    <content><![CDATA[<h4 id="Xctf进阶刷题-1"><a href="#Xctf进阶刷题-1" class="headerlink" title="Xctf进阶刷题-1"></a>Xctf进阶刷题-1</h4><a id="more"></a>

<h5 id="0x01shuffle"><a href="#0x01shuffle" class="headerlink" title="0x01shuffle"></a>0x01shuffle</h5><p>IDA分析即可看到flag</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201028100237540.png" alt="image-20201028100237540"></p>
<h5 id="0x02-reversing-x64elf（python二维数组）"><a href="#0x02-reversing-x64elf（python二维数组）" class="headerlink" title="0x02 reversing-x64elf（python二维数组）"></a>0x02 reversing-x64elf（python二维数组）</h5><p>IDA分析关键函数</p>
<p>可以看到是对输入的值进行了sub_4006FD函数操作然后进行判定</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027174007904.png" alt="image-20201027174007904"></p>
<p>进入函数查看，可以看到是一个计算操作</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027174043472.png" alt="image-20201027174043472"></p>
<p>编写脚本即可得flag</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027175341690.png" alt="image-20201027175341690"></p>
<p><strong>注意：python中二维数组的编写</strong></p>
<h5 id="0x03-guess-the-number（jar包逆向）"><a href="#0x03-guess-the-number（jar包逆向）" class="headerlink" title="0x03 guess-the-number（jar包逆向）"></a>0x03 guess-the-number（jar包逆向）</h5><p>是一个java程序，直接解压jar包，查看.class源码，可以看到是对两个字符串进行操作</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027183024987.png" alt="image-20201027183024987"></p>
<p>一开始想要用python编写脚本的，但是xor函数涉及到了Biginter，所以直接改下代码用Java跑</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027183147009.png" alt="image-20201027183147009"></p>
<h5 id="0x04-easyre（python异或）"><a href="#0x04-easyre（python异或）" class="headerlink" title="0x04 easyre（python异或）"></a>0x04 easyre（python异或）</h5><p>IDA分析关键函数，输入字符串为v7，长度为24，并且做了以下操作，其中unk_402158是已知的数据</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201028092543787.png" alt="image-20201028092543787"></p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201028092904689.png" alt="image-20201028092904689"></p>
<p>编写脚本即可跑出flag</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027182905474.png" alt="image-20201027182905474"></p>
<p><strong>注意：Python中异或要加个括号，不加会先运行6-1</strong></p>
<h5 id="0x05-re-for-50-piz（mips）"><a href="#0x05-re-for-50-piz（mips）" class="headerlink" title="0x05 re-for-50-piz（mips）"></a>0x05 re-for-50-piz（mips）</h5><p>IDA分析，发现和以往的代码都不太一样，载入的时候IDA也提示是MIPS</p>
<p>参考：<a href="https://blog.csdn.net/qq_42967398/article/details/94845416">https://blog.csdn.net/qq_42967398/article/details/94845416</a></p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201028100333224.png" alt="image-20201028100333224"></p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201028100408292.png" alt="image-20201028100408292"></p>
<h5 id="0x06-dmd-50"><a href="#0x06-dmd-50" class="headerlink" title="0x06 dmd-50"></a>0x06 dmd-50</h5><p>IDA分析关键函数，要求输入Key的值</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027182604719.png" alt="image-20201027182604719"></p>
<p>可以看到输出，所以需要进下面的判定</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027182542427.png" alt="image-20201027182542427"></p>
<p>所以输入要等于41里的值，将41的值拖出来用Md5解密即可</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027182629949.png" alt="image-20201027182629949"></p>
<h5 id="0x07-parallel-comparator-200（爆破）"><a href="#0x07-parallel-comparator-200（爆破）" class="headerlink" title="0x07 parallel-comparator-200（爆破）"></a>0x07 parallel-comparator-200（爆破）</h5><p>直接可以看源码分析：</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027182101171.png" alt="image-20201027182101171"></p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027180417612.png" alt="image-20201027180417612"></p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027182054092.png" alt="image-20201027182054092"></p>
<p>所以编写一个脚本就可以了</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027180404777.png" alt="image-20201027180404777"></p>
<p><strong>注意：由于生成的是随机数，所以需要爆破一下</strong></p>
<h5 id="0x08-secret-galaxy-300（运行时堆栈中）"><a href="#0x08-secret-galaxy-300（运行时堆栈中）" class="headerlink" title="0x08 secret-galaxy-300（运行时堆栈中）"></a>0x08 secret-galaxy-300（运行时堆栈中）</h5><p>这个题比较神奇</p>
<p>主函数：看到调用了fill和print</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027180024719.png" alt="image-20201027180024719"></p>
<p>fill函数:给一堆变量赋值了</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027180045329.png" alt="image-20201027180045329"></p>
<p>打印出这些值</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027180116127.png" alt="image-20201027180116127"></p>
<p>动态运行看看：</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027180133857.png" alt="image-20201027180133857"></p>
<p>也没有什么输出也没有什么flag的信息</p>
<p>但是在动态调试的时候在堆栈中意外发现了flag</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027180225886.png" alt="image-20201027180225886"></p>
<h5 id="0x09-srm-50（十六进制转字符串）"><a href="#0x09-srm-50（十六进制转字符串）" class="headerlink" title="0x09 srm-50（十六进制转字符串）"></a>0x09 srm-50（十六进制转字符串）</h5><p>IDA分析关键函数</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027175822604.png" alt="image-20201027175822604"></p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027175734844.png" alt="image-20201027175734844"></p>
<p>可以查看到410A80等的值，十六进制转字符串即可，最终可直接看出flag</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201028093014322.png" alt="image-20201028093014322"></p>
<p><img src="/Users/kami/Desktop/%E7%AC%94%E8%AE%B0/%E9%80%86%E5%90%91/CTF%E9%80%86%E5%90%91%E9%A2%98/typora-user-images/image-20201027175748471.png" alt="image-20201027175748471"></p>
<h5 id="0x0A-simple-check-100（linux动态调试）"><a href="#0x0A-simple-check-100（linux动态调试）" class="headerlink" title="0x0A simple-check-100（linux动态调试）"></a>0x0A simple-check-100（linux动态调试）</h5><p>IDA分析关键函数，是对输入的Key进行一个check操作，然后会对v8运行interesting_function</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027174951320.png" alt="image-20201027174951320"></p>
<p>check函数：</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027175030634.png" alt="image-20201027175030634"></p>
<p>interesting函数：可以看到是v3和flag_data做异或</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027175211284.png" alt="image-20201027175211284"></p>
<p>Flagdata：</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027175058496.png" alt="image-20201027175058496"></p>
<p>有点复杂，选择动态调试，想看看直接绕过输出，结果是一堆乱码</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027175502311.png" alt="image-20201027175502311"></p>
<p>最后得知需要在Linux下进行动态调试，即可得到flag</p>
<h5 id="0x0B-Mysterious（atoi函数）"><a href="#0x0B-Mysterious（atoi函数）" class="headerlink" title="0x0B Mysterious（atoi函数）"></a>0x0B Mysterious（atoi函数）</h5><p>IDA分析关键函数，可以看到只要知道v5的内容就可以了</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027174533035.png" alt="image-20201027174533035"></p>
<p>一开始去分析atoi函数了，但是分析了半天没有弄懂，后来发现这是固定的函数，和itoa对应，是字符串如’123’转整数123</p>
<p>char *itoa (int value, char *str, int base ); </p>
<p>返回值：返回指向str的指针，无错误返回。</p>
<p>int value 被转换的整数，char *string 转换后储存的字符数组，int radix 转换进制数，如2,8,10,16 进制等，大小应在2-36之间。</p>
<p>所以输入的字符串为’122xyz’，即可得到flag</p>
<h5 id="0x0C-newbie-calculations（计算器思路）"><a href="#0x0C-newbie-calculations（计算器思路）" class="headerlink" title="0x0C newbie_calculations（计算器思路）"></a>0x0C newbie_calculations（计算器思路）</h5><p>看题目知道这是个计算器题</p>
<p>IDA分析，函数调用很复杂</p>
<p>参考：<a href="https://www.cnblogs.com/DirWang/p/11586159.html">https://www.cnblogs.com/DirWang/p/11586159.html</a></p>
<p>思路就是：因为没有输入，所以只是对固定数值进行的计算操作，对出现的401100，401000,401220函数进行分析，然后自己用熟悉的语言重写一下，然后复制这段代码运行即可得出flag</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027173642989.png" alt="image-20201027173642989"></p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027173844498.png" alt="image-20201027173844498"></p>
<h5 id="0x0D-re1-100"><a href="#0x0D-re1-100" class="headerlink" title="0x0D re1-100"></a>0x0D re1-100</h5><p>IDA分析，关键函数：</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027172611785.png" alt="image-20201027172611785"></p>
<p>可以看出输入就是bufWrite</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027172650353.png" alt="image-20201027172650353"></p>
<p>所以输入字符串的长度为42，第一位和最后一位分别是{}，前十位是53fc275d81,后十位是4938ae4efd，最后经过一个混淆，要等于下面那个字符串</p>
<p>查看混淆的代码，就是分块处理了下各个字符串，换了下位置</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027173036364.png" alt="image-20201027173036364"></p>
<p>最终换回来就得到flag了</p>
<h5 id="0x0E-answer-to-everything"><a href="#0x0E-answer-to-everything" class="headerlink" title="0x0E answer_to_everything"></a>0x0E answer_to_everything</h5><p>IDA分析关键函数</p>
<p>所以只要输入42，就可以得到一串字符：Cipher from Bill \nSubmit without any tags\n#kdudpeh</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201027173507303.png" alt="image-20201027173507303"></p>
<p>根据题目提示sha1加密和不需要加tag，变化一下就可以得到flag了</p>
<h5 id="0x0F-elrond32"><a href="#0x0F-elrond32" class="headerlink" title="0x0F elrond32"></a>0x0F elrond32</h5><h5 id="0x10-tt3441810"><a href="#0x10-tt3441810" class="headerlink" title="0x10 tt3441810"></a>0x10 tt3441810</h5><h5 id="0x11-re2-cpp-is-awesome（dword-dd）"><a href="#0x11-re2-cpp-is-awesome（dword-dd）" class="headerlink" title="0x11 re2-cpp-is-awesome（dword/dd）"></a>0x11 re2-cpp-is-awesome（dword/dd）</h5><p>IDA看看</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201102151235206.png" alt="image-20201102151235206"></p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201102151429640.png" alt="image-20201102151429640"></p>
<p>这个是主函数</p>
<p>可以看到sub_400B56函数：</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201102151302390.png" alt="image-20201102151302390"></p>
<p>和sub_400B73函数</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201102151145960.png" alt="image-20201102151145960"></p>
<p>所以我们得知要满足判定条件</p>
<p>我们可以看到off_6020A0和dword_6020C0</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201102151547732.png" alt="image-20201102151547732"></p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201102151634166.png" alt="image-20201102151634166"></p>
<p>那么我们只要编写脚本，满足判定条件即可</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201103161236507.png" alt="image-20201103161236507"></p>
<p><strong>注意</strong>：dword代表是4个字节一位，align8代表8字节对齐，所以在0x24和5之间是有一个0的，汇编中dd代表4字节，dw代表2字节，db代表1字节</p>
<h5 id="0x12-re4-unvm-me（python3的int-函数和md5加解密）"><a href="#0x12-re4-unvm-me（python3的int-函数和md5加解密）" class="headerlink" title="0x12 re4-unvm-me（python3的int()函数和md5加解密）"></a>0x12 re4-unvm-me（python3的int()函数和md5加解密）</h5><p>是个后缀pyc的文件</p>
<p>直接拖进软件解出源码</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201102173720552.png" alt="image-20201102173720552"></p>
<p>只要将md5s中的数字转成十六进制后找md5解密网站解密即可，其中有一个少一位的在首位补上0</p>
<p><strong>注意</strong>：#int(‘0x’+n.hexdigest(),16))是将一个十六进制字符串（添加了’0x’让其变成了十六进制）转成十进制</p>
<h5 id="0x13-流浪者"><a href="#0x13-流浪者" class="headerlink" title="0x13 流浪者"></a>0x13 流浪者</h5><p>解开压缩包，是一个exe，运行，发现需要输入字符串然后点击验证按钮</p>
<p>放入IDA分析，在import里寻找getwindowstext函数，果然有</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201103155558866.png" alt="image-20201103155558866"></p>
<p>找到对应调用的函数，可以看到对输入的字符串进行了一些操作</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201103155618140.png" alt="image-20201103155618140"></p>
<p>跟下去看sub_4017F0,看到是根据变换后的字符串，然后再和aA这个数组进行变换，因为是dword类型，是四字节一位的，所以a1+4*v4就相当于a1[v4]，变换完后和对应字符串比较</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201103155652535.png" alt="image-20201103155652535"></p>
<p>aA这个数组如下：</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201103155847933.png" alt="image-20201103155847933"></p>
<p>那么我们就可以编写脚本，最终可得到flag，其中对j判断的0，9，10等数字就是从字符串第一次变换里得到的范围</p>
<p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201103161208429.png" alt="image-20201103161208429"></p>
<h5 id="第一页题目完成"><a href="#第一页题目完成" class="headerlink" title="第一页题目完成:"></a>第一页题目完成:</h5><p><img src="/2020/11/03/0x03Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-1/image-20201103160209798.png" alt="image-20201103160209798"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>0x04Xctf进阶刷题-2</title>
    <url>/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/</url>
    <content><![CDATA[<p>XCTF进阶刷题-2</p>
<a id="more"></a>

<h5 id="0x01-666"><a href="#0x01-666" class="headerlink" title="0x01 666"></a>0x01 666</h5><p>IDA分析</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201103174113594.png" alt="image-20201103174113594"></p>
<p>进入encode去看具体的加密操作，是几个异或操作，然后3个字符一组</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201103174237818.png" alt="image-20201103174237818"></p>
<p>编写脚本，flag就出来了</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201103174322010.png" alt="image-20201103174322010"></p>
<h5 id="0x02-signin-rsa算法"><a href="#0x02-signin-rsa算法" class="headerlink" title="0x02 signin-rsa算法"></a>0x02 signin-rsa算法</h5><p>rsa相关知识：</p>
<p><a href="https://www.52pojie.cn/thread-1100545-1-1.html">https://www.52pojie.cn/thread-1100545-1-1.html</a></p>
<p>ida查看主函数，根据算法特征得知是rsa算法</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201110143659748.png" alt="image-20201110143659748"></p>
<p>以下函数的作用是将输入字符串转为十六进制ascii码字符串：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201110144019734.png" alt="image-20201110144019734"></p>
<p>利用yafu分解（windows安装：<a href="https://blog.csdn.net/weixin_41603028/article/details/97167312%EF%BC%89%EF%BC%8C%E7%84%B6%E5%90%8E%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E5%A6%82%E4%B8%8B%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BD%AC%E6%8D%A2%E5%8D%B3%E5%8F%AF">https://blog.csdn.net/weixin_41603028/article/details/97167312），然后编写脚本如下，然后转换即可</a></p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201110180421766.png" alt="image-20201110180421766"></p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201110180133377.png" alt="image-20201110180133377"></p>
<p>问题：</p>
<p>python3一直无法导入gmpy2的包，只能用python2写了</p>
<h5 id="0x03-igniteme"><a href="#0x03-igniteme" class="headerlink" title="0x03 igniteme"></a>0x03 igniteme</h5><p>ida分析，主函数如下：</p>
<p>可以看到前四位和最后一位是定的，对v7做一个sub_4011C0函数的判断</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201110164753556.png" alt="image-20201110164753556"></p>
<p>跟进函数看看：</p>
<p>把值给了v8，然后v8经过一些操作变成v4，v4和最后的字符串相同</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201110164900645.png" alt="image-20201110164900645"></p>
<p>查看unk_4420B0和sub_4013C0</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201110161046021.png" alt="image-20201110161046021"></p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201110161059343.png" alt="image-20201110161059343"></p>
<p>编写脚本如下即可，然后转一下大小写</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201110165109839.png" alt="image-20201110165109839"></p>
<h5 id="0x04-hackme（-amp-0xff）"><a href="#0x04-hackme（-amp-0xff）" class="headerlink" title="0x04 hackme（&amp;0xff）"></a>0x04 hackme（&amp;0xff）</h5><p>ida分析，找到主函数，分析一下就是，输入字符串，长度为22位，然后抽取其中的10位进行检验（可以看到数组byte_6B4270是22位的），检验方法就是v9和输入的字符串进行异或后要和固定的数组内容相同</p>
<p><strong>注意：循环10次不代表字符串只有10位</strong></p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201110182250771.png" alt="image-20201110182250771"></p>
<p>查看byte_6B4270的内容</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201110182511109.png" alt="image-20201110182511109"></p>
<p>可以编写脚本如下：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201111111154246.png" alt="image-20201111111154246"></p>
<p>要注意的是，v1[i]的值很大，需要和0xff相与，0xff最大值是255，由于整数值超过了255，所以用来控制</p>
<h5 id="0x05-ReverseMe"><a href="#0x05-ReverseMe" class="headerlink" title="0x05 ReverseMe"></a>0x05 ReverseMe</h5><p>ida分析：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201111143110520.png" alt="image-20201111143110520"></p>
<h5 id="0x06-easyre1"><a href="#0x06-easyre1" class="headerlink" title="0x06 easyre1"></a>0x06 easyre1</h5><p>打开ida就能看到，提交即可</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201113115339027.png" alt="image-20201113115339027"></p>
<h5 id="0x07-76号"><a href="#0x07-76号" class="headerlink" title="0x07 76号"></a>0x07 76号</h5><p>发现有个upx的壳，脱壳</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201125151636534.png" alt="image-20201125151636534"></p>
<p>放到ida分析，搜索字符串可以看到有correct字符，查找位置，找到主函数</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201126113743706.png" alt="image-20201126113743706"></p>
<p>但是主函数反编译不出来，重要函数80485E0可以反编译，里面定义了很多变量和switch匹配，不是很理解，动态调试后发现就是匹配输入的字符串，v3就是输入的每一位，v5的由输入的字符串决定的位置是为1，然后再switch里做判断，最后return为1的话就正确</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201126113826531.png" alt="image-20201126113826531"></p>
<p>然后就一位一位推测就可以了</p>
<p>一开始推到了15位，发现在14位的时候直接会跳转到0，研究后发现和v5数组有关，当输入的是h的时候，v11并不会为1，所以就会return 0</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201126114240393.png" alt="image-20201126114240393"></p>
<p>找到对应关系后重新推测：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201126114216580.png" alt="image-20201126114216580"></p>
<p>调试验证成功：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201126112823384.png" alt="image-20201126112823384"></p>
<h5 id="0x08-easyhook（hook）"><a href="#0x08-easyhook（hook）" class="headerlink" title="0x08 easyhook（hook）"></a>0x08 easyhook（hook）</h5><p>主函数，关键函数为sub_401220和sub_401240，然后创建了一个文件</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116134415789.png" alt="image-20201116134415789"></p>
<p>运行一下，发现输入的字符串被改变了：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116141148468.png" alt="image-20201116141148468"></p>
<p>动态调试一下，发现确实在这里写入的输入字符串被改变了</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116141519684.png" alt="image-20201116141519684"></p>
<p>401220:点进4010D0看看</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116134620725.png" alt="image-20201116134620725"></p>
<p>4010D0:</p>
<p>Virtualprotectex修改了指定进程，hprocess和lpaddress是要更改的进程的句柄和页面区域的基地址的指针，5是访问保护属性已更改的区域的大小，以字节为单位。</p>
<p>Writeprocessmemory写入了指定数据，byte_40C9BC是指向缓冲区的指针，该缓冲区包含要在指定进程的地址空间中写入的数据。5是写入的数据大小</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116134806821.png" alt="image-20201116134806821"></p>
<p>返回401220看看是怎么修改的</p>
<p>byte_40C9BC是0xE9，但是这只有一个字节，所以后四个字节就是40C9BD的内容，40C9BD和401080有关</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116142056410.png" alt="image-20201116142056410"></p>
<p>401080:调用了sub_401000,lpbuffer指向包含要写入文件或设备的数据的缓冲区的指针。同时，真正flag的判定条件numer==1也是这里决定的</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116142205966.png" alt="image-20201116142205966"></p>
<p>401000:可以看到对a1进行的操作，编写脚本即可</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116142459347.png" alt="image-20201116142459347"></p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116154606478.png" alt="image-20201116154606478"></p>
<p>401240:并没有什么作用</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116134559636.png" alt="image-20201116134559636"></p>
<h5 id="0x09-secret-string-400（js）"><a href="#0x09-secret-string-400（js）" class="headerlink" title="0x09 secret-string-400（js）"></a>0x09 secret-string-400（js）</h5><p>打开看是一个html和一个js文件，之前没接触过</p>
<p>打开html，是一个验证输入页面，随便输入一个字符串，会弹出nope</p>
<p>搜索了下怎么调试js，开始尝试在代码各处里加入console.log，然后f12查看输出情况</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116171456917.png" alt="image-20201116171456917"></p>
<p>然后页面中出现了隐藏的代码：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116170210757.png" alt="image-20201116170210757"></p>
<p>根据这个代码写出脚本即可：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116171607888.png" alt="image-20201116171607888"></p>
<h5 id="0x0A-easymaze"><a href="#0x0A-easymaze" class="headerlink" title="0x0A easymaze"></a>0x0A easymaze</h5><p>ida分析主函数</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201116172904202.png" alt="image-20201116172904202"></p>
<p>由于分析两个step函数比较复杂，且容易分析错，可以动态调试(linux下的远程动态调试)找出生成的迷宫，下断点，找v5的位置</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201117091836672.png" alt="image-20201117091836672"></p>
<p>再看step2，告诉我们怎么走</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201117092345267.png" alt="image-20201117092345267"></p>
<p>根据迷宫走即可</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201117092811994.png" alt="image-20201117092811994"></p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201117092755620.png" alt="image-20201117092755620"></p>
<h5 id="0x0B-reverse-reverse-for-the-holy-grail"><a href="#0x0B-reverse-reverse-for-the-holy-grail" class="headerlink" title="0x0B reverse reverse-for-the-holy-grail"></a>0x0B reverse reverse-for-the-holy-grail</h5><p>ida分析，可以看到v4的值是判定条件，跟进stringmod看看</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201117160814789.png" alt="image-20201117160814789"></p>
<p>stringmod:是一大堆函数，理解一下</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201117160928953.png" alt="image-20201117160928953"></p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201117161027159.png" alt="image-20201117161027159"></p>
<p>编写脚本：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201117160731736.png" alt="image-20201117160731736"></p>
<h5 id="0x0C-serial-150（动态调试）"><a href="#0x0C-serial-150（动态调试）" class="headerlink" title="0x0C serial-150（动态调试）"></a>0x0C serial-150（动态调试）</h5><p>ida动态调试：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201117180507650.png" alt="image-20201117180507650"></p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/8F5E6F84-02A8-4523-874E-03A0F3AA1C02.png" alt="8F5E6F84-02A8-4523-874E-03A0F3AA1C02"></p>
<p>看到比较长度的代码，10h，所以长度为16</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/915BC464-5DEA-4841-9715-7CACBA9B7E68.png" alt="915BC464-5DEA-4841-9715-7CACBA9B7E68"></p>
<p>比较第一个字符，所以第一个字符是E</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/97BED366-6105-4D26-A4E7-6808DAF3C544.png" alt="97BED366-6105-4D26-A4E7-6808DAF3C544"></p>
<p>第一个字符加上最后一个字符为9B，所以最后一个字符是V(9B-45=56的ascii码)</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/23F762B1-FEB7-48EA-920E-F7F852E166D3.png" alt="23F762B1-FEB7-48EA-920E-F7F852E166D3"></p>
<p>第二位是5A,即Z</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201117180907737.png" alt="image-20201117180907737"></p>
<p>第二位和倒数第二位加起来还是9B,倒数第二位是A</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201117181154507.png" alt="image-20201117181154507"></p>
<p>按理类推即可：EZ9dmq4c8g9G7bAV</p>
<h5 id="0x0D-babymips（mips-位运算符）"><a href="#0x0D-babymips（mips-位运算符）" class="headerlink" title="0x0D babymips（mips,位运算符）"></a>0x0D babymips（mips,位运算符）</h5><p>下载了一个软件用来反汇编mips</p>
<p>就很清楚了。先比较前五个字符，然后在FUN_004007f0里比较后面的</p>
<p>注意：-的优先级大于^</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201120083337582.png" alt="image-20201120083337582"></p>
<p>进入函数查看，重点其实就是 b = (a&lt;&lt;0x1a)&gt;&gt;0x18 | a &gt;&gt;6这两句，现在已知b，求a</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201120083511211.png" alt="image-20201120083511211"></p>
<p>注意：&lt;&lt;和&gt;&gt;操作是32位的，优先级大于｜</p>
<p>因为a肯定是字符，所以1只会出现在后8位，b也是字符，</p>
<p>那么(a&lt;&lt;0x1a)&gt;&gt;0x18的操作就相当于在原来的后面加两个0，即a&lt;&lt;2</p>
<p>b = a&lt;&lt;2|a&gt;&gt;6</p>
<p>同时byte（8位）对整个式子做了限制（强制转换时计算机只保留其后8位），uint和int修饰第一个式子</p>
<p>所以这个式子需要这样理解：</p>
<p>a&lt;&lt;2，即高两位消失，低两位变0</p>
<p>a&gt;&gt;6，即低六位消失，高两位变成低两位</p>
<p>即循环位移</p>
<p>例如：a =  10100011 </p>
<p>1010001100|0000010 = 1010001110 -&gt;10001110 = b</p>
<p>所以我们的a可以这样用b来表示</p>
<p>a = (b &amp; 00000011(0x3) )&lt;&lt;6|(b &amp; 11111100(0xfc))&gt;&gt;2</p>
<p>或者a = (byte)(b&lt;&lt;6|b&gt;&gt;2)</p>
<p>编写脚本如下：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201120095913785.png" alt="image-20201120095913785"></p>
<h5 id="0x0E-Windows-Reverse2-base64"><a href="#0x0E-Windows-Reverse2-base64" class="headerlink" title="0x0E Windows_Reverse2(base64)"></a>0x0E Windows_Reverse2(base64)</h5><p>先ida看看主函数：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201123170313048.png" alt="image-20201123170313048"></p>
<p>看看401240具体干了什么，有点复杂，再进入401000</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201124165655973.png" alt="image-20201124165655973"></p>
<p>还是很复杂，决定动态调试看看：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201124165724832.png" alt="image-20201124165724832"></p>
<p>动态后可以明白401240是先将输入的字符两个两个一组然后代表一位十六进制</p>
<img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201123170618917.png" alt="image-20201123170618917" style="zoom:50%;">

<p>然后401000将前3位和后三位分开，分别经过操作转为4位，最后输出</p>
<p>那么可以编写脚本如下：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201124165542112.png" alt="image-20201124165542112"></p>
<p>最终flag是ADEBDEAEC7BE</p>
<h5 id="0x0F-Windows-Reverse1"><a href="#0x0F-Windows-Reverse1" class="headerlink" title="0x0F Windows_Reverse1"></a>0x0F Windows_Reverse1</h5><p>加壳了：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201125100611130.png" alt="image-20201125100611130"></p>
<p>脱一下：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201125100741673.png" alt="image-20201125100741673"></p>
<p>怎么既视感这么强，这是一个系列吗</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201125100955283.png" alt="image-20201125100955283"></p>
<p>进入401000看看：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201125110924068.png" alt="image-20201125110924068"></p>
<p>看起来只要赋值一下，看看这个402FF8数组</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201125111016733.png" alt="image-20201125111016733"></p>
<p>空的，不是很理解，决定动态跑一下，输入了1</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201125103632415.png" alt="image-20201125103632415"></p>
<p>可以看到是到aZyxwvutsrqponm这个数组里去找了</p>
<p>但是也不是正常的输入的序号就是对应的第几位</p>
<p>多尝试几个后发现是输入的ascii码-32</p>
<p>所以编写脚本即可：</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201125111234444.png" alt="image-20201125111234444"></p>
<p>相差的32位是在这里：数组起始位置是2ff8,下面对于开始有字符对应的是3018</p>
<p><img src="/2020/11/10/0x04Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-2/image-20201125112156887.png" alt="image-20201125112156887"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>0x05Xctf进阶刷题-3 --更新中</title>
    <url>/2020/11/26/0x05Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-3/</url>
    <content><![CDATA[<p>XCTF进阶刷题-3</p>
<a id="more"></a>

<h5 id="0x01-easyre-153（sigchld）"><a href="#0x01-easyre-153（sigchld）" class="headerlink" title="0x01 easyre-153（sigchld）"></a>0x01 easyre-153（sigchld）</h5><p>ida分析主函数，了解了sigchild后，猜测if(!v5)这里应该是属于子进程，动态调试看看</p>
<p><img src="/2020/11/26/0x05Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-3/image-20201126144348053.png" alt="image-20201126144348053"></p>
<p>运行后会接收到信号值tid</p>
<p><img src="/2020/11/26/0x05Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-3/image-20201126144442776.png" alt="image-20201126144442776"></p>
<p>v6 = v5就是对比esp+24h和esp+20h，输入tid值后发现还是不对，对比后尝试输入tid+2即可（不知道原因</p>
<p><img src="/Users/kami/Desktop/hexo/source/_posts/0x05Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-3/image-20201126144950878.png" alt="image-20201126144950878"></p>
<p><img src="/2020/11/26/0x05Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-3/image-20201126144850862.png" alt="image-20201126144850862"></p>
<p>然后就会继续运行，看到flag_is_not_here我愣住了，还以为理解错了</p>
<p><img src="/2020/11/26/0x05Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-3/image-20201126141821555.png" alt="image-20201126141821555"></p>
<p>去看看lol函数，发现是对buf做一些操作，buf就是69800那一串数字，可以动态看看最后生成的字符串，就是rhelheg，即flag</p>
<p><img src="/2020/11/26/0x05Xctf%E8%BF%9B%E9%98%B6%E5%88%B7%E9%A2%98-3/image-20201126143402449.png" alt="image-20201126143402449"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>0x06buuctfWP-1</title>
    <url>/2021/01/18/0x06buuctfWP-1/</url>
    <content><![CDATA[<p>buuctf刷题</p>
<a id="more"></a>

<h5 id="0x01-2019红帽杯easyre-2020-11-30"><a href="#0x01-2019红帽杯easyre-2020-11-30" class="headerlink" title="0x01 2019红帽杯easyre 2020.11.30"></a>0x01 2019红帽杯easyre 2020.11.30</h5><p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201085705304.png" alt="image-20201201085705304"></p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201085742513.png" alt="image-20201201085742513"></p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20201130171506491.png" alt="image-20201130171506491"></p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201085616273.png" alt="image-20201201085616273"></p>
<h5 id="0x02-相册"><a href="#0x02-相册" class="headerlink" title="0x02 相册"></a>0x02 相册</h5><p>感觉这题目稍微简单了点</p>
<p>看java文件，C2似乎会有一些定义，看看C2</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201092820389.png" alt="image-20201201092820389"></p>
<p>猜测这个就是要发送的邮箱，经过base64解密 <img src="/2021/01/18/0x06buuctfWP-1/image-20201201092854869.png" alt="image-20201201092854869"></p>
<p>定义在so文件里了</p>
<img src="/2021/01/18/0x06buuctfWP-1/image-20201201092915874.png" alt="image-20201201092915874" style="zoom:50%;">

<p>打开so文件看到一些字符串，放到base64解一下试试</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201092934423.png" alt="image-20201201092934423"></p>
<p>提交了即可</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201093307175.png" alt="image-20201201093307175"></p>
<h5 id="0x03-Universe-final-answer"><a href="#0x03-Universe-final-answer" class="headerlink" title="0x03 Universe_final_answer"></a>0x03 Universe_final_answer</h5><p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201105908201.png" alt="image-20201201105908201"></p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201105920622.png" alt="image-20201201105920622"></p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201105853132.png" alt="image-20201201105853132"></p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201105757817.png" alt="image-20201201105757817"></p>
<h5 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h5><img src="/2021/01/18/0x06buuctfWP-1/image-20201201154823295.png" alt="image-20201201154823295" style="zoom:50%;">

<img src="/2021/01/18/0x06buuctfWP-1/image-20201201154838647.png" alt="image-20201201154838647" style="zoom:50%;">

<p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201145640995.png" alt="image-20201201145640995"></p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201150351743.png" alt="image-20201201150351743"></p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20201201154732373.png" alt="image-20201201154732373"></p>
<h5 id="0x05-新年快乐-2021-1-5"><a href="#0x05-新年快乐-2021-1-5" class="headerlink" title="0x05 新年快乐 2021.1.5"></a>0x05 新年快乐 2021.1.5</h5><p>好久没做题了，最近在重刷408的一些知识来着…</p>
<p>upx脱壳</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210105142217660.png" alt="image-20210105142217660"></p>
<p>啊这，flag就很明显是HappyNewYear!了</p>
<h5 id="0x06-MRCTF2020-Transform1"><a href="#0x06-MRCTF2020-Transform1" class="headerlink" title="0x06 [MRCTF2020]Transform1"></a>0x06 [MRCTF2020]Transform1</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define LOWORD(l)           ((WORD)(((DWORD_PTR)(l)) &amp; 0xffff))</span><br><span class="line">#define HIWORD(l)           ((WORD)((((DWORD_PTR)(l)) &gt;&gt; 16) &amp; 0xffff))</span><br><span class="line">#define LOBYTE(w)           ((BYTE)(((DWORD_PTR)(w)) &amp; 0xff))</span><br><span class="line">#define HIBYTE(w)           ((BYTE)((((DWORD_PTR)(w)) &gt;&gt; 8) &amp; 0xff))</span><br></pre></td></tr></table></figure>

<p>无壳，主函数如下：</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210111101152811.png" alt="image-20210111101152811"></p>
<p>流程：输入的字符串存储到v6，然后根据dword_40f040[i]的顺序将v6的值赋给byte_414040，然后和dword_40f040[i]的低8位做异或，得到的值和byte_40f0e0相同即可</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210111101618314.png" alt="image-20210111101618314"></p>
<h5 id="0x07-ACTF新生赛2020-SoulLike-（python爆破-pwn-re）2021-1-12"><a href="#0x07-ACTF新生赛2020-SoulLike-（python爆破-pwn-re）2021-1-12" class="headerlink" title="0x07 [ACTF新生赛2020]SoulLike （python爆破 pwn/re）2021.1.12"></a>0x07 [ACTF新生赛2020]SoulLike （python爆破 pwn/re）2021.1.12</h5><p>无壳</p>
<p>主函数，前五位可知是actf{，最后一位是}，中间我们输入的字符经过了sub_55D038那个函数的判定</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210112173435652.png" alt="image-20210112173435652"></p>
<p>进入这个函数，特别长，3000行，反编译需要久一点，可以看出我们输入的字符经过一大堆异或操作，最后和规定的字符对比，同时不符合的话会返回错误信息，可以知道错误在第几位，因此可以选择爆破</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210112173225058.png" alt="image-20210112173225058"></p>
<p>学习python爆破</p>
<p>利用pwn和re正则</p>
<p>re：</p>
<p><a href="https://www.cnblogs.com/python-xkj/archive/2018/06/26/9231624.html">https://www.cnblogs.com/python-xkj/archive/2018/06/26/9231624.html</a></p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210112173704852.png" alt="image-20210112173704852"></p>
<p>pwn库：</p>
<p><a href="https://github.com/Gallopsled/pwntools-tutorial/blob/master/tubes.md#receiving-data">https://github.com/Gallopsled/pwntools-tutorial/blob/master/tubes.md#receiving-data</a></p>
<p><a href="http://docs.pwntools.com/en/latest/">http://docs.pwntools.com/en/latest/</a></p>
<p>基本输入输出：</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210112173902013.png" alt="image-20210112173902013"></p>
<p>运行脚本即可得到flag</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210112172937305.png" alt="image-20210112172937305"></p>
<h5 id="0x08-MRCTF2020-PixelShooter（unity-安卓）2021-1-13"><a href="#0x08-MRCTF2020-PixelShooter（unity-安卓）2021-1-13" class="headerlink" title="0x08 [MRCTF2020]PixelShooter（unity/安卓）2021.1.13"></a>0x08 [MRCTF2020]PixelShooter（unity/安卓）2021.1.13</h5><p>下载下来是一个apk，运行了下发现是个游戏</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210113170627702.png" alt="image-20210113170627702"></p>
<p>看来flag就是要打到一定的分数</p>
<p>用apktool反编译，找了下关键语句，发现并没有，陷入僵局</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210113170709008.png" alt="image-20210113170709008"></p>
<p>搜索了下unity相关信息：<a href="https://blog.csdn.net/weixin_44058342/article/details/87940908">https://blog.csdn.net/weixin_44058342/article/details/87940908</a></p>
<p>原来unity的数据一般存在别的地方</p>
<p>用apktoolbox对apk进行反编译，提取出 game/assets/bin/data/Managed/Assembly-CSarp.dll，使用 ILSpy 打开即可看到dll，然后搜索flag关键词，找到对应点</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210113171010243.png" alt="image-20210113171010243"></p>
<p>然后就能找到flag了</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210113171034487.png" alt="image-20210113171034487"></p>
<p>是个简单题了</p>
<h5 id="0x09-FlareOn1-Bob-Doge-2021-1-18"><a href="#0x09-FlareOn1-Bob-Doge-2021-1-18" class="headerlink" title="0x09 [FlareOn1]Bob Doge 2021.1.18"></a>0x09 [FlareOn1]Bob Doge 2021.1.18</h5><p>打开，是个.net文件</p>
<p>运行一下，发现要求我们解密这串字符串</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210118155431597.png" alt="image-20210118155431597"></p>
<p>使用dnspy反编译，找到main函数</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210118154848447.png" alt="image-20210118154848447"></p>
<p>跟进form1，定义了一个加密的按钮</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210118154955211.png" alt="image-20210118154955211"></p>
<p>查看按钮功能定义，是对一个dat_secret字符串的加密操作</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210118155028582.png" alt="image-20210118155028582"></p>
<p>在资源里我们可以看到这个字符串，31字节</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210118155120940.png" alt="image-20210118155120940"></p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210118155142916.png" alt="image-20210118155142916"></p>
<p>一开始看的这个字符串，把前面5个字节也算进去了，后来发现前5个字节是一些定义</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210118160846527.png" alt="image-20210118160846527"></p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210118160832519.png" alt="image-20210118160832519"></p>
<p>编写脚本：可以得知flag为text的内容，对text进行了两次加密操作最后输出的是text3</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210118155516823.png" alt="image-20210118155516823"></p>
<p>还有一种就是可以在程序上下断点，直接跑，但是我虚拟机上没有.net3服务所以跑不了…….</p>
<h5 id="0x0A-FlareOn5-Ultimate-Minesweeper-2021-1-19"><a href="#0x0A-FlareOn5-Ultimate-Minesweeper-2021-1-19" class="headerlink" title="0x0A [FlareOn5]Ultimate Minesweeper 2021.1.19"></a>0x0A [FlareOn5]Ultimate Minesweeper 2021.1.19</h5><p>打开，发现又是个.net的文件，运行后发现是个扫雷游戏</p>
<p>dnspy反编译一下</p>
<p>主函数：</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119110433175.png" alt="image-20210119110433175"></p>
<p>找到了判定的函数：</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119110525343.png" alt="image-20210119110525343"></p>
<p>看到一个getkey函数，猜测就是生成flag的函数，给了一个数组和一些操作</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119110615575.png" alt="image-20210119110615575"></p>
<p>按照逻辑编了下脚本，跑出来发现不对</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119110834746.png" alt="image-20210119110834746"></p>
<p>然后下断点，看生成的array2的值，然后尝试转换成ascii码，还是不对</p>
<p>那就调试从判定的地方直接跳到成功界面好了，还是不行</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119111206877.png" alt="image-20210119111206877"></p>
<p>此时转换思路，干脆从生成的时候看看哪三个格子不是雷，直接通关好了</p>
<p>开始找初始生成函数：</p>
<p>Initialize函数生成初始界面</p>
<p>minefield生成了30*30</p>
<p>allocatememory里面有一个garbage collect</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119111455340.png" alt="image-20210119111455340"></p>
<p>跟进去看是存储是否存在雷的判定值</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119111427423.png" alt="image-20210119111427423"></p>
<p>下断点，查看garbagecollect的值，在一堆true当中找到3个false的对应坐标记录，然后尝试一下纵横的区别即可（调试两次发现生成的位置的值是固定的</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119111932177.png" alt="image-20210119111932177"></p>
<p>通关即可得到flag</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119110300267.png" alt="image-20210119110300267"></p>
<h5 id="0x0B-GKCTF2020-Chelly’s-identity-2021-1-19"><a href="#0x0B-GKCTF2020-Chelly’s-identity-2021-1-19" class="headerlink" title="0x0B [GKCTF2020]Chelly’s identity 2021.1.19"></a>0x0B [GKCTF2020]Chelly’s identity 2021.1.19</h5><p>这是我目前见过最恶心的题目，函数一个套一个都不知道是什么功能….全靠猜</p>
<p>放到ida里看看字符串</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119180742285.png" alt="image-20210119180742285"></p>
<p>找到对应主函数位置：</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119180823199.png" alt="image-20210119180823199"></p>
<p>输入的字符串存到v35，定义了一个16位的v34空数组</p>
<p>可以猜测是把v35给了v34，然后对v34进行4111BD函数操作和411721函数操作，然后用411852函数做判断</p>
<p>进入4111BD函数看看：</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119181207625.png" alt="image-20210119181207625"></p>
<p>通过16和bad long，可以猜测是判断长度</p>
<p>进入411721函数：</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119181252726.png" alt="image-20210119181252726"></p>
<p>可以看到定义了一个v10，长度还是16位，4116E0函数对v10和128数字进行了一些操作，v9是我们输入的字符串</p>
<p>进入4116E0函数：</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119181546277.png" alt="image-20210119181546277"></p>
<p>定义了一个v6数组，长16位，然后在2-128之间，对i做了一个411672的函数判断，然后把i存到数组里</p>
<p>411672函数功能：</p>
<p>研究了一下发现是判断质数（a2%i</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119181647509.png" alt="image-20210119181647509"></p>
<p>在411721函数下面的循环里，就可以简化一下理解</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119181453477.png" alt="image-20210119181453477"></p>
<p>然后进入411852判断函数：</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210119180607388.png" alt="image-20210119180607388"></p>
<p>已知了操作算法和操作完后的数值，就可以编写脚本了</p>
<p><img src="/2021/01/18/0x06buuctfWP-1/image-20210120114006207.png" alt="image-20210120114006207"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>0x0EbuuctfWP-2</title>
    <url>/2021/04/18/0x0EbuuctfWP-2/</url>
    <content><![CDATA[<p>0x0EbuuctfWP</p>
<a id="more"></a>

<h5 id="0x01-GKCTF2020-BabyDriver（sys文件，键盘扫描码"><a href="#0x01-GKCTF2020-BabyDriver（sys文件，键盘扫描码" class="headerlink" title="0x01 [GKCTF2020]BabyDriver（sys文件，键盘扫描码"></a>0x01 [GKCTF2020]BabyDriver（sys文件，键盘扫描码</h5><p>一个sys文件，无壳，进ida分析，发现两个特殊字符串</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210418140047135.png" alt="image-20210418140047135"></p>
<p>判断算法：猜测是一个迷宫</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210418140141623.png" alt="image-20210418140141623"></p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210418140117787.png" alt="image-20210418140117787"></p>
<p>去看另一个特殊的字符串：是个迷宫无误了</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210418140208701.png" alt="image-20210418140208701"></p>
<p>但是上下左右对应的字符串并不是ascii编码</p>
<p>由于是sys文件，是由键盘过滤驱动获取键盘扫描码来控制上下左右</p>
<p><a href="https://www.supfree.net/search.asp?id=6386">https://www.supfree.net/search.asp?id=6386</a></p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210418140357034.png" alt="image-20210418140357034"></p>
<p>最后得出路径为LKKKLLKLKKKLLLKKKLLLLLL，flag就是flag{403950a6f64f7fc4b655dea696997851}</p>
<h5 id="0x02-GKCTF2020-Check-1n"><a href="#0x02-GKCTF2020-Check-1n" class="headerlink" title="0x02 [GKCTF2020]Check_1n"></a>0x02 [GKCTF2020]Check_1n</h5><p>签到题，下载下来是个很有趣的exe</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210418140728735.png" alt="image-20210418140728735"></p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210418140901219.png" alt="image-20210418140901219"></p>
<p>先查壳，无壳，拖到ida中找开机密码</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210418140757037.png" alt="image-20210418140757037"></p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210418140804734.png" alt="image-20210418140804734"></p>
<p>看到strcmp，合理猜测开机密码就是HelloWorld</p>
<p>果不其然可以登进去了</p>
<p>在桌面看到flag.txt文件，然后发现一串base64，解码，是说去玩方块游戏</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210418141016904.png" alt="image-20210418141016904"></p>
<p>然后打开桌面上的方块游戏，游戏结束flag就出来了</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210418141026120.png" alt="image-20210418141026120"></p>
<p>在ida中也有一串特殊的字符串，但是base64解不开，后来才知道是base58，可以直接解出flag</p>
<h5 id="0x03-V-amp-N2020-公开赛-strangeCpp"><a href="#0x03-V-amp-N2020-公开赛-strangeCpp" class="headerlink" title="0x03 [V&amp;N2020 公开赛]strangeCpp"></a>0x03 [V&amp;N2020 公开赛]strangeCpp</h5><p>无壳，用ida看</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210506152157962.png" alt="image-20210506152157962"></p>
<p>根据关键字符串找到主函数</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210506152146219.png" alt="image-20210506152146219"></p>
<p>没有发现什么异常，但是程序无法跑成功，也无法下断点</p>
<p>在前面的putchar中发现了一段数据</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210506152308299.png" alt="image-20210506152308299"></p>
<p>调用这段数据的函数如下：</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210506152233111.png" alt="image-20210506152233111"></p>
<p>重点在result和红框的异或操作</p>
<p>查看result的生成函数：</p>
<p>有一个小于14549743的值，经过一些操作得到unsigned int类型的v7，赋值给了result，然后result=607052314</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210506152133843.png" alt="image-20210506152133843"></p>
<p>编写脚本：</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210506153448183.png" alt="image-20210506153448183"></p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210506153608511.png" alt="image-20210506153608511"></p>
<p>所以flag是e10adc3949ba59abbe56e057f20f883e</p>
<p>ps:一些常用类型字节数</p>
<p><img src="/2021/04/18/0x0EbuuctfWP-2/image-20210506152014295.png" alt="image-20210506152014295"></p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-2020.6.12</title>
    <url>/2020/06/12/CTF-2020.6.12/</url>
    <content><![CDATA[<h4 id="git文件泄露导致源码泄露"><a href="#git文件泄露导致源码泄露" class="headerlink" title=".git文件泄露导致源码泄露"></a>.git文件泄露导致源码泄露</h4><p>首先，关于git：分布式版本控制系统（版本控制：记录每次文件的改动，并支持协作编辑）</p>
<h5 id="0x1-一些用语解释："><a href="#0x1-一些用语解释：" class="headerlink" title="0x1 一些用语解释："></a>0x1 一些用语解释：</h5><a id="more"></a>

<p>集中式：全部文件存在一个中央服务器中，需联网，修改时从中央服务器中取出修改完放回去。</p>
<p>分布式：各个电脑里都有完整的版本库，修改后需推送，安全性高，可以有一个中央服务器用来方便大家交换修改的版本。</p>
<p>版本库：仓库，目录，文件的修改删除git都可跟踪</p>
<p>工作区和暂存区：工作区就是自身电脑可看到的目录，暂存区在版本库中，将工作区的文件添加到暂存区（git add），然后将暂存区的所有文件添加到master（git commit）。master也是分支，分支的作用是上传未写完的代码后不会让未写完的代码影响别人。</p>
<h5 id="0x2-泄露原理："><a href="#0x2-泄露原理：" class="headerlink" title="0x2 泄露原理："></a>0x2 泄露原理：</h5><p>源码提交到远程托管网站后，从上面把源码pull到服务器时，忘记删除git文件。利用.git文件可以恢复网站的源码，源码里可能会有数据库信息。/使用git进行版本控制，对站点自动部署，配置不当会降.git文件夹直接部署到线上环境。</p>
<p>详细解释：</p>
<p>在一个目录中初始化后，会产生一个名叫.git的隐藏文件夹（版本库）</p>
<p>当开发时采用以下流程时：</p>
<p>1.初始化仓库 , 并将仓库托管在Coding或者Github上 , 便于远程协作/备份/部署<br>2.在本地进行网站开发 , 并定时提交commit , push到远程托管网站<br>3.当一个阶段的开发差不多的时候 , 需要远程登陆服务器 , 通过托管网站再将发行版网站pull到Web目录下（此时会将,git文件夹下载到服务器的web目录下）<br>4.网站正常运行</p>
<p>攻击者可以利用web目录下载Git文件夹，然后就可以利用储存的版本控制信息，完全恢复网站后台的代码和目录结构以及获取数据库信息等。</p>
<h5 id="0x3-利用："><a href="#0x3-利用：" class="headerlink" title="0x3 利用："></a>0x3 利用：</h5><p>1、githack等：同构泄露的.git文件夹下的文件，还原重建工程源代码</p>
<p>2、爬虫爬取整个git目录</p>
<h5 id="0x4-修复："><a href="#0x4-修复：" class="headerlink" title="0x4 修复："></a>0x4 修复：</h5><p>1、对.git目录的访问权限进行控制</p>
<p>2、在每次Pull后删除.git文件夹</p>
<h5 id="0x5-利用场景实践："><a href="#0x5-利用场景实践：" class="headerlink" title="0x5 利用场景实践："></a>0x5 利用场景实践：</h5><p>git_extract下载：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p>
<p>cmd命令：git_extract.py  <a href="http://xxxxx/.git/">http://xxxxx/.git/</a></p>
<p>可扫描出.git漏洞</p>
<p><img src="/2020/06/12/CTF-2020.6.12/image-20200612152136482.png"></p>
<p>点击后：</p>
<p><img src="/2020/06/12/CTF-2020.6.12/image-20201109105110264.png"></p>
<p><img src="/2020/06/12/CTF-2020.6.12/image-20201109105221000.png"></p>
<p><img src="/2020/06/12/CTF-2020.6.12/image-20201109105306274.png"></p>
<p><img src="/2020/06/12/CTF-2020.6.12/image-20200612154814555.png"></p>
<p>放到beyond compare（<a href="http://www.scootersoftware.com/download.php%EF%BC%89%E9%87%8C%E5%AF%B9%E6%AF%94">http://www.scootersoftware.com/download.php）里对比</a></p>
<p><img src="/2020/06/12/CTF-2020.6.12/image-20201109105349980.png"></p>
<p>仔细看差别：</p>
<p>flag{82efc37f1cd5d4636ea7cadcd5a814a2}</p>
<p>提交即可</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>funnyre-花指令与符号执行angr</title>
    <url>/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/</url>
    <content><![CDATA[<p>从funnyre的题中学习花指令和符号执行angr</p>
<a id="more"></a>

<p>结合恶意代码实战分析书籍和funnyre题目：</p>
<h5 id="0x1-花指令"><a href="#0x1-花指令" class="headerlink" title="0x1 花指令"></a>0x1 花指令</h5><p>用来防止反编译。</p>
<h6 id="0x11-分为可执行和不可执行"><a href="#0x11-分为可执行和不可执行" class="headerlink" title="0x11 分为可执行和不可执行"></a>0x11 分为可执行和不可执行</h6><p><strong>可执行</strong>：</p>
<p>能够正常运行的但又不改变原始程序逻辑性。无用指令。特点：①可以正常运行；②不改变任何寄存器的值；③反汇编器可以正确反汇编该指令。</p>
<p>病毒在传播时通过变形引擎随机产生一组该类别花指令并插入到病毒正常代码中，可以改变病毒的特征码，从而起到变形的作用。</p>
<p><strong>不可执行</strong>：</p>
<p>插入到原始代码中但又不改变原始程序逻辑性。无用字节。特点：①不可以正常运行；②不改变任何寄存器的值；③反汇编器可能会错误反汇编这些字节。</p>
<p>是某个合法指令的一部分，但是程序运行时，位于实际不可执行的代码路径。</p>
<h6 id="0x12-常见花指令"><a href="#0x12-常见花指令" class="headerlink" title="0x12 常见花指令"></a>0x12 常见花指令</h6><h6 id="1、指向同一目的地址的两个连续条件跳转指令-虚假的call指令-jz-jnz-call"><a href="#1、指向同一目的地址的两个连续条件跳转指令-虚假的call指令-jz-jnz-call" class="headerlink" title="1、指向同一目的地址的两个连续条件跳转指令+虚假的call指令 jz+jnz+call"></a>1、指向同一目的地址的两个连续条件跳转指令+虚假的call指令 jz+jnz+call</h6><p>jz+jnz在效果上相当于jmp，则总是会跳转</p>
<p>ida这类面向代码流的反汇编工具：当遇到jnz的时候，不管false分支会不会执行，都会反汇编它</p>
<p>​                                                            当出现call指令时，会先反汇编紧跟call指令之后的字节，然后再反汇编call指令的调用目标</p>
<p>机器执行中：</p>
<p>hello字符串不会被当作指令执行，call会直接去pop</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126142113968.png" alt="image-20210126142113968"></p>
<p>但是反汇编中：</p>
<p>hello这串字符串被当作指令了</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126142153025.png" alt="image-20210126142153025"></p>
<p>可以使用c或者d转换数据和代码</p>
<p>general-option-numberofbytes可以显示出字节源码</p>
<h6 id="2、固定的跳转指令xor-jz"><a href="#2、固定的跳转指令xor-jz" class="headerlink" title="2、固定的跳转指令xor+jz"></a>2、固定的跳转指令xor+jz</h6><p>xor eax,eax会将eax寄存器置0，同时也会置位标志寄存器的zero标志，jz是如果zero标志被置位，就会跳转，那么就肯定会跳，但是反汇编器总会反汇编false分支，所以就会反汇编后续紧跟的。</p>
<p>如下图：E9和E8的作用一样，E9是jmp的字节码，E8是call的，可以用来欺骗反汇编器</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126144811365.png" alt="image-20210126144811365"></p>
<p>转换后：</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126144927590.png" alt="image-20210126144927590"></p>
<img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126145012481.png" alt="image-20210126145012481" style="zoom:50%;">

<h6 id="3、无效指令patchbyte"><a href="#3、无效指令patchbyte" class="headerlink" title="3、无效指令patchbyte"></a>3、无效指令patchbyte</h6><p>一个字节同时被两个指令使用，反编译器就会产生困惑</p>
<p>可以使用idc调用patchbyte函数，用nop指令序列替换</p>
<p>在这个图里，先执行mov，然后xor后寄存器置0，jz必然会执行，jz跳转到mov中间，后半个字符串是jmp指令，跳转到真正的位置</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126145914975.png" alt="image-20210126145914975"></p>
<p>但是反汇编中就会：</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126150038992.png" alt="image-20210126150038992"></p>
<p>使用idc进行简化，因为实际效果就是eax置0，所以可以将这些db都置0，改为nop</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126150251070.png" alt="image-20210126150251070"></p>
<h5 id="0x2-angr"><a href="#0x2-angr" class="headerlink" title="0x2 angr"></a>0x2 angr</h5><p>angr是一个利用python开发的二进制程序分析框架，安装时会修改libz3和libVEX，可能会影响其他程序的正常使用，所以学习使用python虚拟环境。</p>
<p>angr模拟执行的过程就像人阅读代码，一边阅读的过程一边做预测、抽象执行结果，预估“执行结果”。在angr模拟执行前，必须先将变量（内存或者寄存器）符号化（声明哪些变量是符号），这些符号化的输入也正是程序的输入抽象。</p>
<h6 id="0x21-安装虚拟环境virtualenvwrapper："><a href="#0x21-安装虚拟环境virtualenvwrapper：" class="headerlink" title="0x21 安装虚拟环境virtualenvwrapper："></a>0x21 安装虚拟环境virtualenvwrapper：</h6><p>pip install之后初始化source报错</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126160200586.png" alt="image-20210126160200586"></p>
<p>需要在~/.bashrc文件中设置python解释器的路径</p>
<p>插入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export VIRTUALENVWRAPPER_PYTHON&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">export VIRTUALENVWRAPPER_VIRTUALENV&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;virtualenv</span><br></pre></td></tr></table></figure>

<p>然后source ~/.bashrc生效</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126160341966.png" alt="image-20210126160341966"></p>
<h6 id="0x22-安装angr："><a href="#0x22-安装angr：" class="headerlink" title="0x22 安装angr："></a>0x22 安装angr：</h6><p><code>mkvirtualenv --python=$(which python3) angr &amp;&amp; pip install angr</code></p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126161130297.png" alt="image-20210126161130297"></p>
<p>环境就装好了</p>
<h6 id="0x23-angr使用："><a href="#0x23-angr使用：" class="headerlink" title="0x23 angr使用："></a>0x23 angr使用：</h6><p>参考：<a href="https://xz.aliyun.com/t/7117/#toc-17">https://xz.aliyun.com/t/7117/#toc-17</a></p>
<p>先创建一个proj，载入需要模拟执行的程序</p>
<p><code> &gt;&gt;&gt; proj = angr.Project(&#39;/bin/true&#39;)</code></p>
<p>factory，即  AngrObjectFactory，提供重要分析对象的接口，如 blocks / state / SimulationManager等</p>
<p>state，project 只是给出程序最初镜像的信息，state 可以给出模拟程序执行到某条指令时的进程的具体状态。可以设置 state 对象初始化寄存器/内存/栈帧等信息</p>
<p>通过solver可以访问求解引擎claripy，用于求解约束，也就可以求解出相应输出的输入</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126163407337.png" alt="image-20210126163407337"></p>
<h5 id="0x3-funnyre实践"><a href="#0x3-funnyre实践" class="headerlink" title="0x3 funnyre实践"></a>0x3 funnyre实践</h5><p>先修改花指令</p>
<p>40061A处的call有问题，使用c和d来转换</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126144235928.png" alt="image-20210126144235928"></p>
<p>用d转换成数据</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126143748946.png" alt="image-20210126143748946"></p>
<p>此时我们再用c将40061B转为代码，整个代码就变成了这样：</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126143848888.png" alt="image-20210126143848888"></p>
<p>根据上下的几个函数，应该大家格式都是一样，所以编写python脚本，使用idc的patchbyte把jz和jnz以及0e8h都给nop掉</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126153307012.png" alt="image-20210126153307012"></p>
<p>往下拉，发现这样的地方还有好几处，全都改掉之后，发现还是不能反编译</p>
<p>在main的地方感觉和平时见的不太一样，右键createp，创建一个函数，就可以反编译了：</p>
<p>接下来来看主函数：输入的flag长度要为38并且定义了首尾是flag{}，然后对所有字符进行了一大堆异或操作</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126153743674.png" alt="image-20210126153743674"></p>
<p>然后在最后，和unk_4025C0数组做对比</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126154110881.png" alt="image-20210126154110881"></p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126154152338.png" alt="image-20210126154152338"></p>
<p>这么多操作总不能重新写一个脚本跑</p>
<p>获取程序的开始地址：我们的程序开始是以v6=0开始，xor eax,eax就是将eax置0，64位rax是以eax作为其最低的32位</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126175926148.png" alt="image-20210126175926148"></p>
<p>获取存储要求解的字符串的开始地址：</p>
<p>在main函数里我们需要得知rbx的值，在main函数的前一个init函数中有定义</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126171814154.png" alt="image-20210126171814154"></p>
<p>获取这是我们最终想要的结果的地址：</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126171024631.png" alt="image-20210126171024631"></p>
<p>动态调试的时候在这里还看到了定义：</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126182027607.png" alt="image-20210126182027607"></p>
<p>使用angr，编写脚本如下：</p>
<p><img src="/2021/01/26/funnyre-%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8Cangr/image-20210126175145859.png" alt="image-20210126175145859"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>花指令</tag>
        <tag>angr</tag>
      </tags>
  </entry>
  <entry>
    <title>VNCTF2021-Reverse-wp</title>
    <url>/2021/04/13/VNCTF2021-Reverse-wp/</url>
    <content><![CDATA[<p>VNCTF2021-Reverse-wp</p>
<a id="more"></a>

<h5 id="0x1-notsudoku"><a href="#0x1-notsudoku" class="headerlink" title="0x1 notsudoku"></a>0x1 notsudoku</h5><p>查看基本信息，发现upx壳，脱壳（upx -d）</p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413053005139.png" alt="image-20210413053005139"></p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413053047491.png" alt="image-20210413053047491"></p>
<p>放到ida里看看，发现并没有明文字符串，而是一堆关于py的信息</p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413053232312.png" alt="image-20210413053232312"></p>
<p>可以猜测是用py打包的</p>
<p>所以尝试解包（使用最新版的pyinstxtractor.py，可以自动生成pyc文件，不用手工改magic value，这个2.pyc就是我们需要的</p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413053535763.png" alt="image-20210413053535763"></p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413053444736.png" alt="image-20210413053444736"></p>
<p>但是经过查看和struct中的magic value并不相同，所以手动替换一下，使用py3.7和uncompyle6可以正常解出源码，py3.9会报错，py2也会报错，easy那个软件也会报错</p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413054918399.png" alt="image-20210413054918399"></p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413054757278.png" alt="image-20210413054757278"></p>
<p>开始研究源码：</p>
<p> <img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413055029915.png" alt="image-20210413055029915"></p>
<p>替换掉一些日文：</p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413055104065.png" alt="image-20210413055104065"></p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413055129674.png" alt="image-20210413055129674"></p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413055212442.png" alt="image-20210413055212442"></p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413055149840.png" alt="image-20210413055149840"></p>
<p>通过已给的数字提示以及题目，判断这是一个五阶幻方，然后要求我们按1的顺序输入每个字所在的横纵坐标</p>
<p>根据此图我们就可以推出输入的字符串</p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413055310499.png" alt="image-20210413055310499"></p>
<p>编写脚本，得到flag：e3a912c1e911ad82544af0c3d753f44f</p>
<p><img src="/2021/04/13/VNCTF2021-Reverse-wp/image-20210413061037076.png" alt="image-20210413061037076"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>mac+gitbook笔记环境搭建</title>
    <url>/2021/07/08/mac-gitbook%E7%AC%94%E8%AE%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h4 id="mac-gitbook笔记环境搭建"><a href="#mac-gitbook笔记环境搭建" class="headerlink" title="mac+gitbook笔记环境搭建"></a>mac+gitbook笔记环境搭建</h4><p>为了更方便看笔记以及总结漏洞复现情况，搭建了一个gitbook环境</p>
<a id="more"></a>

<p>ps：node版本为14时，安装gitbook会报错</p>
<h5 id="0x1-nvm安装：用来管理node版本"><a href="#0x1-nvm安装：用来管理node版本" class="headerlink" title="0x1 nvm安装：用来管理node版本"></a>0x1 nvm安装：用来管理node版本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;nvm-sh&#x2F;nvm.git</span><br><span class="line">cd nvm</span><br><span class="line">sh install.sh</span><br><span class="line">vim ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>

<p>在bash_profile中输入如下字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export NVM_DIR&#x3D;&quot;$HOME&#x2F;.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR&#x2F;nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR&#x2F;nvm.sh&quot; </span><br><span class="line">[ -s &quot;$NVM_DIR&#x2F;bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR&#x2F;bash_completion&quot;</span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="/2021/07/08/mac-gitbook%E7%AC%94%E8%AE%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210707144052355.png" alt="image-20210707144052355"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bash_profile</span><br><span class="line">nvm -v</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/08/mac-gitbook%E7%AC%94%E8%AE%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210707144130595.png" alt="image-20210707144130595"></p>
<p>安装v10版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm install v10</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/08/mac-gitbook%E7%AC%94%E8%AE%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210707151354988.png" alt="image-20210707151354988"></p>
<p>转换使用v10版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm use 10</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/08/mac-gitbook%E7%AC%94%E8%AE%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210707151502733.png" alt="image-20210707151502733"></p>
<h6 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h6><p>发现每次重新打开终端都要source ~/.bash_profile才能更改配置</p>
<h6 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h6><p>zsh加载的是 ~/.zshrc文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<p>添加source ~/.bash_profile语句即可</p>
<p><img src="/2021/07/08/mac-gitbook%E7%AC%94%E8%AE%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210707144557243.png" alt="image-20210707144557243"></p>
<h5 id="0x2-安装gitbook："><a href="#0x2-安装gitbook：" class="headerlink" title="0x2 安装gitbook："></a>0x2 安装gitbook：</h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">npm install -g gitbook-cli</span><br><span class="line">gitbook -V</span><br></pre></td></tr></table></figure>

<p>运行完成如下图：（顺便其中gitbook真的会装好久，换了源还是没有很快</p>
<p><img src="/2021/07/08/mac-gitbook%E7%AC%94%E8%AE%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210707163709690.png" alt="image-20210707163709690"></p>
<h5 id="0x3-使用gitbook："><a href="#0x3-使用gitbook：" class="headerlink" title="0x3 使用gitbook："></a>0x3 使用gitbook：</h5><p>建好文件夹后cd进入，初始化gitbook：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitbook init</span><br></pre></td></tr></table></figure>

<p>自主修改readme.md和summary.md</p>
<p>summary.md（也就是目录）的内容如下：</p>
<p><img src="/2021/07/08/mac-gitbook%E7%AC%94%E8%AE%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210708090946536.png" alt="image-20210708090946536"></p>
<p>运行后大致如下图，introduction就是readme.md的内容</p>
<p>左侧的目录就是summary.md的内容</p>
<p><img src="/2021/07/08/mac-gitbook%E7%AC%94%E8%AE%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210708090518889.png" alt="image-20210708090518889"></p>
<p>可以按个人所需安装一些有用的插件：</p>
<p>建议直接npm，感觉gitbook install很慢</p>
<p>比如加个页脚：</p>
<p><img src="/2021/07/08/mac-gitbook%E7%AC%94%E8%AE%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210708091106973.png" alt="image-20210708091106973"></p>
<p>然后在文件夹下生成一个book.json文件，在里面填写配置和插件信息</p>
<p>我的book.json文件是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;title&quot; : &quot;kamivul&quot;,</span><br><span class="line">  &quot;author&quot; : &quot;0xkami&quot;,</span><br><span class="line">  &quot;description&quot; : &quot;漏洞复现记录&quot;,</span><br><span class="line">  &quot;language&quot; : &quot;zh-hans&quot;,</span><br><span class="line">  &quot;plugins&quot;: [&quot;chapter-fold&quot;,&quot;back-to-top-button&quot;,&quot;code&quot;,&quot;copy-code-button&quot;,&quot;-lunr&quot;, &quot;-search&quot;, &quot;search-pro&quot;,&quot;splitter&quot; ,&quot;tbfed-pagefooter&quot;],</span><br><span class="line">  &quot;pluginsConfig&quot;: &#123;</span><br><span class="line">        &quot;tbfed-pagefooter&quot;: &#123;</span><br><span class="line">            &quot;copyright&quot;:&quot;--by 0xkami&quot;,</span><br><span class="line">            &quot;modify_label&quot;: &quot;该文件修订时间：&quot;,</span><br><span class="line">            &quot;modify_format&quot;: &quot;YYYY-MM-DD HH:mm:ss&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>效果如图：</p>
<p><img src="/2021/07/08/mac-gitbook%E7%AC%94%E8%AE%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20210708091242739.png" alt="image-20210708091242739"></p>
<h5 id="ps："><a href="#ps：" class="headerlink" title="ps："></a>ps：</h5><p>还不知道要不要绑到这个博客域名里，毕竟太菜了</p>
]]></content>
      <tags>
        <tag>gitbook</tag>
      </tags>
  </entry>
  <entry>
    <title>mac下pyqt5+pycharm的环境配置</title>
    <url>/2021/06/10/mac%E4%B8%8Bpyqt5-pycharm%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>因为最近学习了很多，然后写了一些小的脚本，想合成一下，就研究了一下python的图形化编程，配置了一上午，也踩了点坑，终于配置成功了。</p>
<a id="more"></a>

<h5 id="0x1-在pycharm中安装库文件"><a href="#0x1-在pycharm中安装库文件" class="headerlink" title="0x1 在pycharm中安装库文件"></a>0x1 在pycharm中安装库文件</h5><p>PyQt5和pyqt5-tools，会附带下一些其他的库文件的</p>
<p><img src="/2021/06/10/mac%E4%B8%8Bpyqt5-pycharm%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20210610150145658.png" alt="image-20210610150145658"></p>
<p>下载源：</p>
<p><img src="/2021/06/10/mac%E4%B8%8Bpyqt5-pycharm%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20210610150220633.png" alt="image-20210610150220633"></p>
<h5 id="0x2-安装external-tools"><a href="#0x2-安装external-tools" class="headerlink" title="0x2 安装external tools"></a>0x2 安装external tools</h5><p>在tools里面，配置qt designer和pyuic</p>
<p>路径如下：</p>
<p><strong>qt designer：</strong></p>
<p>program：site-packages/qt5_applications/Qt/bin/Designer.app</p>
<p><strong>pyuic：</strong></p>
<p>program：项目python的路径</p>
<p>arguments：-m PyQt5.uic.pyuic  $FileName$ -o $FileNameWithoutExtension$.py</p>
<p><img src="/2021/06/10/mac%E4%B8%8Bpyqt5-pycharm%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20210610151237291.png" alt="image-20210610151237291"></p>
<p><img src="/2021/06/10/mac%E4%B8%8Bpyqt5-pycharm%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20210610151320248.png" alt="image-20210610151320248"></p>
<p>此时我们简单的配置就完成了</p>
<h5 id="0x3-运行"><a href="#0x3-运行" class="headerlink" title="0x3 运行"></a>0x3 运行</h5><p>使用qt designer生成一个ui文件在文件夹下，然后使用pyuic转换成py文件</p>
<p><img src="/2021/06/10/mac%E4%B8%8Bpyqt5-pycharm%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20210610152501223.png" alt="image-20210610152501223"></p>
<p>接下来我们在test里面调用它</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import QApplication, QMainWindow</span><br><span class="line">import ui #ui.py</span><br><span class="line">class MyWindow(QMainWindow, ui.Ui_MainWindow):</span><br><span class="line">    def __init__(self, parent&#x3D;None):</span><br><span class="line">        super(MyWindow, self).__init__(parent)</span><br><span class="line">        self.setupUi(self)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    myWin &#x3D; MyWindow()</span><br><span class="line">    myWin.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<p>此时出现了一个问题：</p>
<p><img src="/2021/06/10/mac%E4%B8%8Bpyqt5-pycharm%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20210610153155166.png" alt="image-20210610153155166"></p>
<p>解决方法：看了网上很多的都没用，尝试了下在pycharm里添加环境变量，就成功了</p>
<p><img src="/2021/06/10/mac%E4%B8%8Bpyqt5-pycharm%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20210610152929133.png" alt="image-20210610152929133"></p>
<p><img src="/2021/06/10/mac%E4%B8%8Bpyqt5-pycharm%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20210610154327948.png" alt="image-20210610154327948"></p>
]]></content>
      <tags>
        <tag>pyqt5</tag>
      </tags>
  </entry>
  <entry>
    <title>python小脚本合集</title>
    <url>/2021/07/08/python%E5%B0%8F%E8%84%9A%E6%9C%AC%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<a id="more"></a>

<p>打开json：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(jsonfile, &#39;r&#39;, encoding&#x3D;&#39;utf8&#39;)as f:</span><br><span class="line">        json_data &#x3D; json.load(f)</span><br></pre></td></tr></table></figure>

<p>输出到json：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(jsonoutfile, &#39;a&#39;, encoding&#x3D;&#39;utf8&#39;)as fp:</span><br><span class="line">     json.dump(templateData, fp)</span><br><span class="line">     fp.write(&#39;\n&#39;)#加了一个换行</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cvedatas &#x3D; []</span><br><span class="line">cvedatas.append(templateData)</span><br><span class="line">with open(&quot;cve.json&quot;, &#39;a&#39;, encoding&#x3D;&#39;utf8&#39;)as f:</span><br><span class="line">    json.dump(cvedatas, f, ensure_ascii&#x3D;False)</span><br></pre></td></tr></table></figure>

<p>遍历目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">files &#x3D; os.listdir(cacheDirPath)</span><br><span class="line">    for file in files:</span><br><span class="line">        json_transfer(os.path.join(cacheDirPath, file), jsonFile)</span><br></pre></td></tr></table></figure>

<p>翻译有道：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_translate_youdao(word):</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;fanyi.youdao.com&#x2F;translate?smartresult&#x3D;dict&amp;smartresult&#x3D;rule&quot;</span><br><span class="line">    Form_data &#x3D; &#123;</span><br><span class="line">        &quot;i&quot;: word,</span><br><span class="line">        &quot;from&quot;: &quot;AUTO&quot;,</span><br><span class="line">        &quot;to&quot;: &quot;AUTO&quot;,</span><br><span class="line">        &quot;smartresult&quot;: &quot;dict&quot;,</span><br><span class="line">        &quot;client&quot;: &quot;fanyideskweb&quot;,</span><br><span class="line">        &quot;salt&quot;: &quot;1512399450582&quot;,</span><br><span class="line">        &quot;sign&quot;: &quot;78181ebbdcb38de9b4a3f4cd1d38816b&quot;,</span><br><span class="line">        &quot;doctype&quot;: &quot;json&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;2.1&quot;,</span><br><span class="line">        &quot;keyfrom&quot;: &quot;fanyi.web&quot;,</span><br><span class="line">        &quot;action&quot;: &quot;FY_BY_CLICKBUTTION&quot;,</span><br><span class="line">        &quot;typoResult&quot;: &quot;false&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">    try:</span><br><span class="line">        response &#x3D; requests.post(url, data&#x3D;Form_data)</span><br><span class="line">        content &#x3D; json.loads(response.text)</span><br><span class="line">        result &#x3D; content[&quot;translateResult&quot;][0][0][&quot;tgt&quot;]</span><br><span class="line">        return result</span><br><span class="line">    except:</span><br><span class="line">        return &quot;wrong!&quot;</span><br></pre></td></tr></table></figure>

<p>根据正则匹配内容修改文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tem1 &#x3D; &#39;script_template(&quot;FullScan&quot;&#39;</span><br><span class="line">with open(xxfile, &#39;r&#39;, encoding&#x3D;&#39;utf8&#39;)as f:</span><br><span class="line">    with open(&quot;final-&quot;+xxfile, &quot;w&quot;, encoding&#x3D;&quot;utf-8&quot;)as f3:</span><br><span class="line">        for line in f:</span><br><span class="line">            f3.write(re.sub(&#39;script_template\(&quot;.*&quot;&#39;, tem1, line))</span><br></pre></td></tr></table></figure>

<p>不区分大小写匹配两个字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for key in databasekey:</span><br><span class="line">    if(s1.lower().rfind(key.lower())) &#x3D;&#x3D; -1 :</span><br><span class="line">        continue</span><br><span class="line">    else:</span><br><span class="line">        print(s1 + &quot;:yes&quot;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>世界线偏移-2021.6.10</title>
    <url>/2021/06/10/%E4%B8%96%E7%95%8C%E7%BA%BF%E5%81%8F%E7%A7%BB-2021-6-10/</url>
    <content><![CDATA[<p>近期的一些小成果：</p>
<a id="more"></a>

<p>1、成长平台百分，写了不少脚本和总结</p>
<p><img src="/2021/06/10/%E4%B8%96%E7%95%8C%E7%BA%BF%E5%81%8F%E7%A7%BB-2021-6-10/image-20210528091015995.png" alt="image-20210528091015995"></p>
<p><img src="/2021/06/10/%E4%B8%96%E7%95%8C%E7%BA%BF%E5%81%8F%E7%A7%BB-2021-6-10/image-20210528100934762.png" alt="image-20210528100934762" style="zoom: 50%;"><img src="/2021/06/10/%E4%B8%96%E7%95%8C%E7%BA%BF%E5%81%8F%E7%A7%BB-2021-6-10/image-20210528100950328.png" alt="image-20210528100950328" style="zoom: 33%;"></p>
<p>2、换了个更好的公司</p>
<p><img src="/2021/06/10/%E4%B8%96%E7%95%8C%E7%BA%BF%E5%81%8F%E7%A7%BB-2021-6-10/image-20210610145500746.png" alt="image-20210610145500746"></p>
]]></content>
  </entry>
  <entry>
    <title>django-webproject</title>
    <url>/2021/03/05/django-webproject/</url>
    <content><![CDATA[<h4 id="django网站搭建"><a href="#django网站搭建" class="headerlink" title="django网站搭建"></a>django网站搭建</h4><p>–关于我最近在干嘛–</p>
<p>零基础开始的一个独立bootstrap+django网站搭建学习</p>
<p>需求：增删改查+上传下载文件+导出数据到csv+筛选+搜索</p>
<p>项目完整代码：<a href="https://github.com/0xkami/django-web">https://github.com/0xkami/django-web</a></p>
<a id="more"></a>

<h5 id="0x1-基础功能"><a href="#0x1-基础功能" class="headerlink" title="0x1 基础功能"></a>0x1 基础功能</h5><p>利用pycharm搭建一个django项目，可以成功开启最基础的访问</p>
<p>前端使用bootstrap，模版使用的是clearmin，很简洁的一个管理平台</p>
<h6 id="0x11-整体框架："><a href="#0x11-整体框架：" class="headerlink" title="0x11 整体框架："></a>0x11 整体框架：</h6><img src="/2021/03/05/django-webproject/image-20210301101823208.png" alt="image-20210301101823208">

<p>urls.py:</p>
<p><img src="/2021/03/05/django-webproject/image-20210305143550833-4928991.png" alt="image-20210305143550833"></p>
<h6 id="0x12-数据库设计："><a href="#0x12-数据库设计：" class="headerlink" title="0x12 数据库设计："></a>0x12 数据库设计：</h6><p>在电脑上装好sql，使用navicat创建连接，在django项目中创建对于数据库并迁移</p>
<p>以下就是需要存到数据库中的信息字段：</p>
<p><img src="/2021/03/05/django-webproject/image-20210301102403994-4928991.png" alt="image-20210301102403994"></p>
<p>在整体项目（和url文件在同一文件夹下）的settings中添加数据库的信息：</p>
<p><img src="/2021/03/05/django-webproject/image-20210301102612299-4928991.png" alt="image-20210301102612299"></p>
<p>在项目命令行运行 <code>python manage.py makemigrations</code>和<code>python manage.py migrate </code>，在navicat就能看到创建好的数据库</p>
<p><img src="/2021/03/05/django-webproject/image-20210301104219610-4928991.png" alt="image-20210301104219610"></p>
<h6 id="0x13-基础展示信息页面：（-分页）"><a href="#0x13-基础展示信息页面：（-分页）" class="headerlink" title="0x13 基础展示信息页面：（+分页）"></a>0x13 基础展示信息页面：（+分页）</h6><p>在数据库中插入一些信息，然后想要在某个页面中以表格的形式展示它的部分内容</p>
<p>重点代码：<code>data_sum = vul_info.objects.order_by(&#39;vul_id&#39;)</code>，vul_info是model中的类名，order_by可以根据固定字段来进行排序</p>
<p>view.py中此功能完整代码：（加了分页的功能）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@require_http_methods([&quot;GET&quot;, ])</span><br><span class="line">def vulinfo(request):</span><br><span class="line">    data_sum &#x3D; vul_info.objects.order_by(&#39;vul_id&#39;) </span><br><span class="line">    paginator &#x3D; Paginator(data_sum, 6)  # 每页6条记录</span><br><span class="line">    page &#x3D; request.GET.get(&#39;page&#39;, 1)</span><br><span class="line">    currentpage &#x3D; int(page)</span><br><span class="line">    all_page_num &#x3D; paginator.num_pages</span><br><span class="line">    try:</span><br><span class="line">        # 获取当前页码的记录</span><br><span class="line">        data_sum &#x3D; paginator.page(page)</span><br><span class="line">    except PageNotAnInteger:</span><br><span class="line">        # 如果用户输入的页码不是整数时,显示第1页的内容</span><br><span class="line">        data_sum &#x3D; paginator.page(1)</span><br><span class="line">    except EmptyPage:</span><br><span class="line">        # 如果用户输入的页数不在系统的页码列表中时,显示最后一页的内容</span><br><span class="line">        data_sum &#x3D; paginator.page(paginator.num_pages)</span><br><span class="line"></span><br><span class="line">    info &#x3D; &#123;</span><br><span class="line">        &quot;vuls&quot;: data_sum, # 定义了返回的数据名，在前端可以利用for循环来读取数据库里的内容</span><br><span class="line">        &quot;currentpage&quot;: currentpage,</span><br><span class="line">        &quot;all_page_num&quot;: all_page_num</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return render(request, &#39;vulinfo.html&#39;, info) # vulinfo.html是前端页面的名字</span><br></pre></td></tr></table></figure>

<p>urls.py:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path(r&#39;^vulinfo&#x2F;(?P&lt;pageNumber&gt;\d+)&#39;, views.vulinfo, name&#x3D;&#39;vulinfo&#39;)</span><br></pre></td></tr></table></figure>

<p>前端页面：</p>
<p>通过for循环，可以返回需要的数据，同时做了一个详细页面点击的链接</p>
<p><img src="/2021/03/05/django-webproject/image-20210301111120033-4928991.png" alt="image-20210301111120033"></p>
<p>效果图如下：</p>
<p><img src="/2021/03/05/django-webproject/image-20210301111200294-4928991.png" alt="image-20210301111200294"></p>
<h6 id="0x14-提交信息页面：（-上传文件）"><a href="#0x14-提交信息页面：（-上传文件）" class="headerlink" title="0x14 提交信息页面：（+上传文件）"></a>0x14 提交信息页面：（+上传文件）</h6><p>使用forms进行信息的提交，在forms中进行定义：</p>
<p><img src="/2021/03/05/django-webproject/image-20210301114000246-4928991.png" alt="image-20210301114000246"></p>
<p>view.py：（加了上传文件的功能）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@csrf_exempt</span><br><span class="line">@require_http_methods([&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def vul_upload(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        form &#x3D; VulUploadForm(request.POST) # 获取form的内容</span><br><span class="line">        print(request.POST)</span><br><span class="line">        </span><br><span class="line">				# 上传文件功能</span><br><span class="line">        file_obj &#x3D; request.FILES.get(&quot;poc_file&quot;, None)</span><br><span class="line">        destination &#x3D; open(os.path.join(&quot;#输入上传文件的地址&quot;, request.POST.get(&quot;poc_file&quot;)),&#39;wb+&#39;)</span><br><span class="line">        for i in file_obj.chunks():</span><br><span class="line">            destination.write(i)</span><br><span class="line">        destination.close()</span><br><span class="line">        print(form)</span><br><span class="line"></span><br><span class="line">        if form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            return HttpResponse(&quot;新增成功&quot;)</span><br><span class="line">            content &#x3D; &#123;</span><br><span class="line">                &quot;form&quot;: form</span><br><span class="line">            &#125;</span><br><span class="line">            return render(request, &quot;insert.html&quot;, content)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&#39;Sorry...&#39;)</span><br><span class="line">    return render(request, &#39;insert.html&#39;)</span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305141424306-4928991.png" alt="image-20210305141424306"></p>
<p>下拉框和日期选择实现：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305141616584-4928991.png" alt="image-20210305141616584"></p>
<h6 id="0x15-详细信息页面："><a href="#0x15-详细信息页面：" class="headerlink" title="0x15 详细信息页面："></a>0x15 详细信息页面：</h6><p>展示所有数据库的数据，并对一部分数据提供修改的功能：</p>
<p>效果图如下：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305141656027-4928991.png" alt="image-20210305141656027"></p>
<p>信息展示的前端同基础展示信息页面</p>
<p>修改功能使用了模态框+js</p>
<p>view.py:</p>
<p>通过js实现post，传输前端数据，获取对应的vul_id和要更新的数据</p>
<p>主要语句：vul_info.objects.filter(vul_id=xx).update(snort=xx)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def update_snort(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        snort_info &#x3D; request.POST.get(&#39;snort&#39;)</span><br><span class="line">        snort_detail &#x3D; request.POST.get(&#39;snort_detail&#39;)</span><br><span class="line">        vulid &#x3D; request.POST.get(&#39;vul_id&#39;)</span><br><span class="line">        vul_info.objects.filter(vul_id&#x3D;vulid).update(snort&#x3D;snort_info)</span><br><span class="line">        vul_info.objects.filter(vul_id&#x3D;vulid).update(snort_detail&#x3D;snort_detail)</span><br><span class="line">        return HttpResponse(&#39;save success!&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def update_track(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        track_info &#x3D; request.POST.get(&#39;track_stauts&#39;, &#39;&#39;)</span><br><span class="line">        vulid &#x3D; request.POST.get(&#39;vul_id&#39;)</span><br><span class="line">        print(vulid)</span><br><span class="line">        vul_info.objects.filter(vul_id&#x3D;vulid).update(track_stauts&#x3D;track_info)</span><br><span class="line">        return HttpResponse(&#39;save success!&#39;)</span><br></pre></td></tr></table></figure>

<p>前端：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305142711997-4928991.png" alt="image-20210305142711997"></p>
<p>js:</p>
<p><img src="/2021/03/05/django-webproject/image-20210305142818341-4928991.png" alt="image-20210305142818341"></p>
<p>效果图：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305142905738-4928991.png" alt="image-20210305142905738"></p>
<p>至此基础功能都已经实现</p>
<h5 id="0x2-附加功能"><a href="#0x2-附加功能" class="headerlink" title="0x2 附加功能"></a>0x2 附加功能</h5><h6 id="0x21-搜索功能"><a href="#0x21-搜索功能" class="headerlink" title="0x21 搜索功能"></a>0x21 搜索功能</h6><p>使用q搜索，提供名字\cve\cnnvd的搜索</p>
<p>view.py：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def search(request):</span><br><span class="line">    q &#x3D; request.GET.get(&#39;q&#39;)</span><br><span class="line">    search_list &#x3D; vul_info.objects.filter(Q(name__icontains&#x3D;q) | Q(cve__icontains&#x3D;q) | Q(cnnvd__icontains&#x3D;q) )</span><br><span class="line">    error_msg &#x3D; &#39;No result&#39;</span><br><span class="line">    return render(request, &#39;vulinfo.html&#39;, &#123;&#39;vuls&#39;: search_list,</span><br><span class="line">                                            &#39;error_msg&#39;: error_msg,</span><br><span class="line">                                            &#125;)</span><br></pre></td></tr></table></figure>

<p>前端：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305143500136-4928991.png" alt="image-20210305143500136"></p>
<p>效果：</p>
<p>在这里输入关键字即可：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305143657723-4928991.png" alt="image-20210305143657723"></p>
<h6 id="0x22-下拉框筛选显示"><a href="#0x22-下拉框筛选显示" class="headerlink" title="0x22 下拉框筛选显示"></a>0x22 下拉框筛选显示</h6><p>事先预定好了一些关键筛选，点击即可跳转对应的筛选页面：</p>
<p>筛选页面view.py：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def filter_1(request):</span><br><span class="line">    search_lists &#x3D; vul_info.objects.filter(Q(protection_status_ips&#x3D;1) &amp; Q(protection_status_sac&#x3D;1))</span><br><span class="line">    error_msg &#x3D; &#39;No result&#39;</span><br><span class="line">    return render(request, &#39;vulinfo.html&#39;, &#123;&#39;vuls&#39;: search_lists,</span><br><span class="line">                                            &#39;error_msg&#39;: error_msg,</span><br><span class="line">                                            &#125;)</span><br></pre></td></tr></table></figure>

<p>前端：下拉框使用dropdown，点击后就会跳转</p>
<p><img src="/2021/03/05/django-webproject/image-20210305143848554-4928991.png" alt="image-20210305143848554"></p>
<p>效果图：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305143711042-4928991.png" alt="image-20210305143711042"></p>
<h6 id="0x23-导出"><a href="#0x23-导出" class="headerlink" title="0x23 导出"></a>0x23 导出</h6><p>前端写了一个导出按钮，点击即可输出为一个csv文件，支持不同筛选页面的输出</p>
<p>view.py:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def export(request):</span><br><span class="line">    vul_lis &#x3D; vul_info.objects.all()</span><br><span class="line">    response &#x3D; HttpResponse(content_type&#x3D;&#39;text&#x2F;csv&#39;)</span><br><span class="line">    time_now &#x3D; time.strftime(&#39;%Y%m%d&#39;)</span><br><span class="line">    filename &#x3D; &#39;vul_&#39; + time_now</span><br><span class="line">    response.write(codecs.BOM_UTF8)</span><br><span class="line">    response[&#39;Content-Disposition&#39;] &#x3D; f&#39;attachment; filename&#x3D;&quot;&#123;filename&#125;.csv&quot;&#39;</span><br><span class="line">    writer &#x3D; csv.writer(response)</span><br><span class="line">    writer.writerow([&#39;vul_id&#39;, &#39;name&#39;, &#39;track&#39;, &#39;poc&#39;,</span><br><span class="line">                     &#39;snort&#39;, &#39;cve&#39;, &#39;cnnvd&#39;,</span><br><span class="line">                     &#39;ips&#39;, &#39;sac&#39;, &#39;note&#39;, &#39;update-time&#39;])</span><br><span class="line">    for vul in vul_lis:</span><br><span class="line">        writer.writerow([vul.vul_id, vul.name, vul.track_stauts, vul.poc, vul.snort, vul.cve, vul.cnnvd,</span><br><span class="line">                         vul.protection_status_ips, vul.protection_status_sac, vul.note, vul.updated_time])</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure>

<p>前端：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305144111506-4928991.png" alt="image-20210305144111506"></p>
<p>效果图：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305144435191-4928991.png" alt="image-20210305144435191"></p>
<h6 id="0x24-信息汇总页面"><a href="#0x24-信息汇总页面" class="headerlink" title="0x24 信息汇总页面"></a>0x24 信息汇总页面</h6><p>使用了c3表格，有模板</p>
<p>view.py：传输了一些数据到前端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def index(request):</span><br><span class="line">    sum &#x3D; vul_info.objects.all().count()</span><br><span class="line">    high &#x3D; vul_info.objects.filter(severity&#x3D;&#39;2&#39;).count()</span><br><span class="line">    med &#x3D; vul_info.objects.filter(severity&#x3D;&#39;1&#39;).count()</span><br><span class="line">    low &#x3D; vul_info.objects.filter(severity&#x3D;&#39;0&#39;).count()</span><br><span class="line">    wgzs &#x3D; vul_info.objects.filter(track_stauts&#x3D;&#39;0&#39;).count()</span><br><span class="line">    gzzs &#x3D; vul_info.objects.filter(track_stauts&#x3D;&#39;1&#39;).count()</span><br><span class="line">    ygzs &#x3D; vul_info.objects.filter(track_stauts&#x3D;&#39;2&#39;).count()</span><br><span class="line">    tgips &#x3D; vul_info.objects.filter(Q(protection_status_ips&#x3D;1) &amp; Q(protection_status_sac&#x3D;1)).count()</span><br><span class="line">    tg &#x3D; vul_info.objects.filter(Q(protection_status_ips&#x3D;0) &amp; Q(protection_status_sac&#x3D;1)).count()</span><br><span class="line">    ips &#x3D; vul_info.objects.filter(Q(protection_status_ips&#x3D;1) &amp; Q(protection_status_sac&#x3D;0)).count()</span><br><span class="line">    ntgips &#x3D; vul_info.objects.filter(Q(protection_status_ips&#x3D;0) &amp; Q(protection_status_sac&#x3D;0)).count()</span><br><span class="line">    d &#x3D; int(tgips &#x2F; sum * 100)</span><br><span class="line">    e &#x3D; int(tg &#x2F; sum * 100)</span><br><span class="line">    f &#x3D; int(ips &#x2F; sum * 100)</span><br><span class="line">    g &#x3D; int(ntgips &#x2F; sum * 100)</span><br><span class="line">    a &#x3D; int(wgzs &#x2F; sum * 100)</span><br><span class="line">    b &#x3D; int(gzzs &#x2F; sum * 100)</span><br><span class="line">    c &#x3D; int(ygzs &#x2F; sum * 100)</span><br><span class="line"></span><br><span class="line">    return render(request, &#39;index.html&#39;, &#123;&#39;sum&#39;: sum, &#39;high&#39;: high, &#39;med&#39;: med, &#39;low&#39;: low,</span><br><span class="line">                                          &#39;wgz&#39;: a, &#39;gzz&#39;: b, &#39;ygz&#39;: c,</span><br><span class="line">                                          &#39;wgzs&#39;: wgzs, &#39;gzzs&#39;: gzzs, &#39;ygzs&#39;: ygzs,</span><br><span class="line">                                          &#39;tgips&#39;: d, &#39;tg&#39;: e, &#39;ips&#39;: f,&#39;ntgips&#39;: g,</span><br><span class="line">                                          &#39;tgipss&#39;: tgips, &#39;tgs&#39;: tg, &#39;ipss&#39;: ips,&#39;ntgipss&#39;: ntgips&#125;)</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305144403691-4928991.png" alt="image-20210305144403691"></p>
<h6 id="0x25-文件下载"><a href="#0x25-文件下载" class="headerlink" title="0x25 文件下载"></a>0x25 文件下载</h6><p>单个poc文件下载功能，直接在页面上做了下载链接，点击即可下载对应poc：</p>
<p>view.py：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def download_file(request, vul_id):</span><br><span class="line">    search_lists &#x3D; vul_info.objects.get(vul_id&#x3D;vul_id)</span><br><span class="line">    file_name &#x3D; search_lists.poc_file</span><br><span class="line">    the_file_name &#x3D; &#39;#文件存储的地址&#39;+ file_name</span><br><span class="line">    file &#x3D; open(the_file_name, &#39;rb&#39;)</span><br><span class="line">    response &#x3D; StreamingHttpResponse(file)</span><br><span class="line">    response[&#39;Content-Type&#39;] &#x3D; &#39;application&#x2F;octet-stream&#39;</span><br><span class="line">    response[&#39;Content-Disposition&#39;] &#x3D; &#39;attachement;filename&#x3D;&quot;&#123;0&#125;&quot;&#39;.format(file_name)</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure>

<p>前端：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305144648161-4928991.png" alt="image-20210305144648161"></p>
<p>效果图：</p>
<p><img src="/2021/03/05/django-webproject/image-20210305144804727-4928991.png" alt="image-20210305144804727"></p>
]]></content>
      <tags>
        <tag>django</tag>
        <tag>python-web</tag>
      </tags>
  </entry>
  <entry>
    <title>加密与解密笔记--更新中</title>
    <url>/2020/11/10/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="加密与解密"><a href="#加密与解密" class="headerlink" title="加密与解密"></a>加密与解密</h3><a id="more"></a>

<h4 id="0x1-基础"><a href="#0x1-基础" class="headerlink" title="0x1 基础"></a>0x1 基础</h4><h5 id="0x01-大端小端"><a href="#0x01-大端小端" class="headerlink" title="0x01 大端小端"></a>0x01 大端小端</h5><p>大端：12345678h存入后还是12345678，高位字节存入低地址，依序</p>
<p>小端：12345678h存入后变为78563412，低位字节存入低地址，反序</p>
<h5 id="0x02-win-api函数"><a href="#0x02-win-api函数" class="headerlink" title="0x02 win api函数"></a>0x02 win api函数</h5><p>应用程序编程接口，相当于是一个合成了各个功能的函数库，提供应用程序运行所需要的窗口管理、内存管理等功能</p>
<p>windows应用程序-&gt;API-&gt;系统服务-&gt;硬件层</p>
<p>常用函数：</p>
<ul>
<li><p>hmemcpy{目的数据地址，源数据地址，数据大小}：拷贝数据，当做断点</p>
</li>
<li><p>GetWindowsText{句柄，缓冲区地址，复制的最大字符数}：获得文本控件内容</p>
</li>
<li><p>GetDlgItem{句柄，控件标识}：获取指定对话框的句柄</p>
</li>
<li><p>GetDlgItemText{句柄，控件标识，缓冲区指针，缓冲区长度}：获取对话框文本，成功就返回文本长度</p>
</li>
<li><p>messageBox{父窗口句柄，消息框文本，消息框标题，消息框样式}：创建信息框</p>
</li>
</ul>
<h5 id="0x03-句柄"><a href="#0x03-句柄" class="headerlink" title="0x03 句柄"></a>0x03 句柄</h5><p>相当于一个唯一的标识，通常为32位，让windows能正确引用对应的对象。当一个进程被初始化的，系统会分配句柄表，句柄值就是索引</p>
<h5 id="0x04-windows消息机制"><a href="#0x04-windows消息机制" class="headerlink" title="0x04 windows消息机制"></a>0x04 windows消息机制</h5><p>消息是给应用程序与应用程序之间、应用程序与windows系统间通信的</p>
<p>应用程序实现功能靠消息触发，靠消息响应和处理来完成</p>
<p>流程：事件发生-&gt;windows把输入的消息放入系统消息队列-&gt;拷贝到相应的应用程序队列-&gt;循环检索发给对应的应用程序窗口</p>
<p>常用函数：</p>
<ul>
<li>sendMessage{目的窗口句柄，消息标识，消息的WPARAM，消息的LPARAM}</li>
</ul>
<h5 id="0x05-保护模式"><a href="#0x05-保护模式" class="headerlink" title="0x05 保护模式"></a>0x05 保护模式</h5><p>虚拟内存：简化内存管理，防止多程序间的冲突</p>
<p>应用程序不会直接访问物理内存，应用程序启动时，操作系统会新建一个进程，分配给它2GB的虚拟地址，虚拟内存管理器将应用程序的代码映射到虚拟地址中，并把当前所需要的代码读取到物理地址中。</p>
<p>dll也会映射到虚拟地址，但是都是要和对应的使用的应用程序一起，没有自己私有的虚拟地址。</p>
<p>不同应用程序的虚拟地址是隔离的。</p>
<h4 id="0x2-动态调试"><a href="#0x2-动态调试" class="headerlink" title="0x2 动态调试"></a>0x2 动态调试</h4><h6 id="0x01-OD的使用"><a href="#0x01-OD的使用" class="headerlink" title="0x01 OD的使用:"></a>0x01 OD的使用:</h6><p>L：log</p>
<p>E：executable</p>
<p>M：memory</p>
<p>T：threads</p>
<p>W：windows</p>
<p>Hhandles</p>
<p>C：CPU，默认的主窗口，绝大部分操作，包括了反汇编，信息，数据，寄存器和堆栈</p>
<p>P：patches</p>
<p>K：call stack</p>
<p>B：breakpoints</p>
<p>R：reference</p>
<p>S：source</p>
<p>反汇编窗口：</p>
<p>地址：单击地址可以跳转，再次双击可以返回</p>
<p>机器码：设置或取消无条件断点，F2</p>
<p>汇编代码：可以直接修改</p>
<p>注释：分号(;)可以加注释</p>
<p>信息窗口：</p>
<p>显示寄存器值、API函数、跳转提示等</p>
<p>数据面板：</p>
<p>十六进制显示，ctrl+G可以快速跳转到对应地址</p>
<p>寄存器面板：</p>
<p>单击鼠标右键可以切换显示寄存器的方式</p>
<p>堆栈面板：</p>
<p>显示ESP指向地址的内容，API函数和子程序等</p>
<h4 id="0x3-静态分析"><a href="#0x3-静态分析" class="headerlink" title="0x3 静态分析"></a>0x3 静态分析</h4><p>peid用来查壳，ida用来静态分析，做逆向题的时候经常用到</p>
<h6 id="0x01-ida的常用功能"><a href="#0x01-ida的常用功能" class="headerlink" title="0x01 ida的常用功能"></a>0x01 ida的常用功能</h6><p>F5 反汇编</p>
<h6 id="0x02-IDC脚本的使用实践"><a href="#0x02-IDC脚本的使用实践" class="headerlink" title="0x02 IDC脚本的使用实践"></a>0x02 IDC脚本的使用实践</h6><p>比如用来解密对代码段进行加密的程序</p>
<p><strong>smc</strong>（self modifying code）技术，在可执行文件中保存着加密后的数据。只有在程序运行的时候，程序某处的代码就会被调用来解密</p>
<p>书本例子实践：</p>
<p>打开书本里的例子exe</p>
<p>是一个pe32的文件，用ida7.0（32）版本的ida</p>
<p><img src="/2020/11/10/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E7%AC%94%E8%AE%B0/image-20210712165355470.png" alt="image-20210712165355470"></p>
<p>打开后看到程序入口：</p>
<p><img src="/2020/11/10/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E7%AC%94%E8%AE%B0/image-20210712164939040.png" alt="image-20210712164939040"></p>
<p>看到了call 401080和401060的操作，点击过去看看</p>
<p><img src="/2020/11/10/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E7%AC%94%E8%AE%B0/image-20210712165750238.png" alt="image-20210712165750238"></p>
<p>反汇编一下：</p>
<p><img src="/2020/11/10/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E7%AC%94%E8%AE%B0/image-20210712165645333.png" alt="image-20210712165645333"></p>
<p>看起来像是对401060做了一系列操作</p>
<p>401060的函数如下，无法看出功能</p>
<p><img src="/2020/11/10/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E7%AC%94%E8%AE%B0/image-20210712165134938.png" alt="image-20210712165134938"></p>
<p>理解401080，是从401060的首位开始，之后的每一位数据和1做异或，运行到401074为止</p>
<p>编写一个idc脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;idc.idc&gt;</span><br><span class="line">static decrypt(from, size, key ) &#123; &#x2F;&#x2F;from是解密的开始地址，size是大小，key是异或的值</span><br><span class="line">   auto i, x; </span><br><span class="line">   for ( i&#x3D;0; i &lt; size; i&#x3D;i+1 ) &#123; </span><br><span class="line">      x &#x3D; Byte(from); &#x2F;&#x2F;获取一个字节数据</span><br><span class="line">      x &#x3D; (x^key); &#x2F;&#x2F;进行异或</span><br><span class="line">      PatchByte(from,x); &#x2F;&#x2F;将一个字节数据放回原处</span><br><span class="line">      from &#x3D; from + 1;&#x2F;&#x2F;地址加1</span><br><span class="line">   &#125; </span><br><span class="line"> Message(&quot;\n&quot; + &quot;Decrypt Complete\n&quot;);</span><br><span class="line">&#125; </span><br><span class="line">static main()&#123;</span><br><span class="line">	decrypt(0x401060, 0x15, 0x1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<p><img src="/2020/11/10/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E7%AC%94%E8%AE%B0/image-20210712182457179.png" alt="image-20210712182457179"></p>
<p><img src="/2020/11/10/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E7%AC%94%E8%AE%B0/image-20210712182432116.png" alt="image-20210712182432116"></p>
<p>运行结束：401060函数的数据就被解密出来了</p>
<p><img src="/2020/11/10/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E7%AC%94%E8%AE%B0/image-20210712182522600.png" alt="image-20210712182522600"></p>
<p>还是无法看出来是什么功能</p>
<p>按u，全部转换成数据：</p>
<p><img src="/2020/11/10/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E7%AC%94%E8%AE%B0/image-20210712182813147.png" alt="image-20210712182813147"></p>
<p>再按c，ida重新分析，即可得到最终代码</p>
<p><img src="/2020/11/10/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E7%AC%94%E8%AE%B0/image-20210712182831000.png" alt="image-20210712182831000"></p>
<p>附:IDC常用函数：</p>
<p><strong>读取和修改数据的函数：</strong></p>
<ul>
<li>long Byte（long addr），从虚拟地址addr处读取一个字节值</li>
<li>long Word（long addr），从虚拟地址addr处读取一个字（2个字节）值</li>
<li>long Dword（long addr），从虚拟地址addr处读取一个双字（4个字节）值</li>
<li>long PatchByte（long addr，long val），设置虚拟地址addr处的一个字节值</li>
<li>long PatchWord（long addr，long val），设置虚拟地址addr处的一个字值</li>
<li>long PatchDword（long addr，long val），设置虚拟地址addr处读取一个双字值</li>
<li>void idLoaded（long addr），如果addr包含有效数据，则返回1，否则返回0</li>
</ul>
<p><strong>用户交互函数：</strong></p>
<ul>
<li>void Message（string fromat，……），在输出窗口打印一条格式化消息，这个函数类似于C语言的printf函数，并接受printf风格的格式化字符串</li>
<li>void printf（……），在输出窗口中打印每个参数的字符串表示形式</li>
<li>void Warning（string fromat，……），在对话框中显示一条格式化消息</li>
<li>string AskStr（string default，string prompt），显示一个输入框，要求用户输入一个字符串值。如果操作成功，则返回用户的字符串；如果对话框被取消，则返回0</li>
<li>string AskFile（long doSave，string mask，String prompt），显示一个文件选择对话框，以简化选择文件的任务。你可以创建新文件保存数据（doSave=1），或选择现有的文件读取数据（doSave=0）。你可以根据mask（如*.<em>或</em>.idc）过滤显示的文件列表。如果操作成功，则返回选定文件的名称；如果对话框被取消，则返回0</li>
<li>long AskYN（long deafult，string prompt），用一个答案为“是”或“否”的问题提示用户，如初一个默认的答案（1为是，0为否，-1为取消）。返回值是一个表示选定答案的整数。</li>
<li>long ScreenEA（），返回当前光标所在位置的虚拟地址</li>
<li>bool Jump（long addr），跳转到反汇编窗口的指定地址</li>
</ul>
<h6 id="0x03-hiew使用"><a href="#0x03-hiew使用" class="headerlink" title="0x03 hiew使用"></a>0x03 hiew使用</h6><p>F5 输入地址后跳转</p>
<p>F3 修改文件内容，直接输入要修改的数字即可</p>
<p>F9 更新，修改完内容后可以更新一下</p>
<p>F10 更新完后文件内容就被修改了</p>
<h4 id="0x4-逆向分析技术"><a href="#0x4-逆向分析技术" class="headerlink" title="0x4 逆向分析技术"></a>0x4 逆向分析技术</h4><h6 id="启动函数："><a href="#启动函数：" class="headerlink" title="启动函数："></a><strong>启动函数：</strong></h6><p>编译器会生成的一个代码，用来完成初始化进程，然后才会执行winmain函数。各编译器有各自的启动函数。启动函数在分析的时候可以略过</p>
<h6 id="函数："><a href="#函数：" class="headerlink" title="函数："></a><strong>函数：</strong></h6><ul>
<li><p>组成：函数名，入口参数，返回值，函数功能</p>
<p>CALL指令：会保存返回信息（它之后的指令的地址），遇到RET的时候就返回。CALL后跟着的就是被调用的函数的首地址</p>
</li>
<li><p>参数传递：</p>
<ul>
<li><p>堆栈方式：先进后出。</p>
<p>流程：1、压入函数结束时应返回的地址和需要的一些参数</p>
<p>​            2、函数使用EBP指针+偏移量对堆栈中的参数进行寻址，然后取出进行操作</p>
<p>​            3、函数使用RET返回，CPU把EIP设为之前堆栈里存入的应返回的地址，继续执行</p>
<p>一般用EBP存取堆栈，也会用ESP堆栈指针来寻址，结合栈溢出学习看</p>
</li>
<li><p>寄存器方式：一部分参数使用寄存器，用完的话剩下的用堆栈</p>
</li>
<li><p>通过全局变量进行隐含参数的传递</p>
</li>
</ul>
</li>
<li><p>返回值：</p>
<p>一般放在EAX中返回，如果结果超过了EAX的容量，其高32位就会放到EDX中</p>
</li>
</ul>
<h6 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h6><ul>
<li><p>局部变量：</p>
<p>在堆栈中进行分配，函数执行完就释放。或者直接存在寄存器中。</p>
</li>
<li><p>全局变量：</p>
<p>作用于整个程序，放在全局变量的内存区，通常位于一个固定的位置</p>
</li>
<li><p>数组：</p>
<p>在内存中按顺序连续存放在一起，一般用基址+偏移量来访问</p>
</li>
</ul>
<h6 id="控制语句："><a href="#控制语句：" class="headerlink" title="控制语句："></a>控制语句：</h6><p>CMP：</p>
<p>JZ：</p>
<h6 id="指令修改："><a href="#指令修改：" class="headerlink" title="指令修改："></a>指令修改：</h6><p>替换一个字节：90 nop</p>
<h4 id="0x5-常见的保护技术"><a href="#0x5-常见的保护技术" class="headerlink" title="0x5 常见的保护技术"></a>0x5 常见的保护技术</h4><h4 id="0x4-解密"><a href="#0x4-解密" class="headerlink" title="0x4 解密"></a>0x4 解密</h4><h4 id="0x5-PE文件"><a href="#0x5-PE文件" class="headerlink" title="0x5 PE文件"></a>0x5 PE文件</h4><h4 id="0x6-脱壳"><a href="#0x6-脱壳" class="headerlink" title="0x6 脱壳"></a>0x6 脱壳</h4><h4 id="0x7-保护"><a href="#0x7-保护" class="headerlink" title="0x7 保护"></a>0x7 保护</h4><h4 id="0x8-PEDIY"><a href="#0x8-PEDIY" class="headerlink" title="0x8 PEDIY"></a>0x8 PEDIY</h4>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>加密与解密</tag>
      </tags>
  </entry>
  <entry>
    <title>恶意代码分析实战笔记--更新中</title>
    <url>/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="恶意代码分析实战笔记–更新中"><a href="#恶意代码分析实战笔记–更新中" class="headerlink" title="恶意代码分析实战笔记–更新中"></a>恶意代码分析实战笔记–更新中</h3><p>所有分析文件下载：<a href="https://github.com/mikesiko/PracticalMalwareAnalysis-Labs">https://github.com/mikesiko/PracticalMalwareAnalysis-Labs</a></p>
<a id="more"></a>

<h4 id="0x1-恶意代码类型"><a href="#0x1-恶意代码类型" class="headerlink" title="0x1 恶意代码类型"></a>0x1 恶意代码类型</h4><p>后门，僵尸网络，下载器，间谍软件，启动器，内核套件，勒索软件，发送垃圾邮件，蠕虫或病毒</p>
<h4 id="0x2-分析方法"><a href="#0x2-分析方法" class="headerlink" title="0x2 分析方法"></a>0x2 分析方法</h4><h5 id="0x21-静态分析"><a href="#0x21-静态分析" class="headerlink" title="0x21 静态分析"></a>0x21 静态分析</h5><h6 id="反病毒引擎扫描："><a href="#反病毒引擎扫描：" class="headerlink" title="反病毒引擎扫描："></a>反病毒引擎扫描：</h6><p><strong>virustotal</strong>:<a href="http://www.virustotal.com/">http://www.virustotal.com</a></p>
<h6 id="哈希："><a href="#哈希：" class="headerlink" title="哈希："></a>哈希：</h6><p>恶意代码的指纹，常用md5算法和sha1，可以通过搜索哈希值去看是否已经被识别分析过</p>
<p>可以用<strong>md5deep</strong>来生成一个程序的哈希值/或者<strong>winmd5</strong></p>
<h6 id="Strings"><a href="#Strings" class="headerlink" title="Strings:"></a>Strings:</h6><p>可以用<strong>strings</strong>来简单查看程序中含有的字符串，但是并非完全可靠，主要是要从错误信息中获取有效信息，如错误信息中提示了说缺少邮件类型的dll,我们就可以猜测到这个程序可能是利用了邮件系统</p>
<h6 id="混淆与加壳"><a href="#混淆与加壳" class="headerlink" title="混淆与加壳"></a>混淆与加壳</h6><p>加壳是混淆的一种</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123095412066.png" alt="image-20201123095412066"></p>
<p>可以用<strong>peid</strong>之类的工具来检测和脱壳</p>
<h6 id="pe文件头："><a href="#pe文件头：" class="headerlink" title="pe文件头："></a>pe文件头：</h6><p>pe文件头里的信息</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123101809636.png" alt="image-20201123101809636"></p>
<p><img src="/Users/kami/Desktop/hexo/source/_posts/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123101503221.png" alt="image-20201123101503221"></p>
<p>resourcehacker可以查看资源节(.rsrc)</p>
<h6 id="链接库和函数："><a href="#链接库和函数：" class="headerlink" title="链接库和函数："></a>链接库和函数：</h6><p>ida中可以看到导入表</p>
<p><strong>dependence</strong> <strong>walker</strong>工具可以列出程序的动态链接函数</p>
<p>常见dll：</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123095848393.png" alt="image-20201123095848393"></p>
<p>导入函数可以去微软官方文档查</p>
<h5 id="第一章实践：【】内为官方答案补充"><a href="#第一章实践：【】内为官方答案补充" class="headerlink" title="第一章实践：【】内为官方答案补充"></a>第一章实践：【】内为官方答案补充</h5><h6 id="0x211："><a href="#0x211：" class="headerlink" title="0x211："></a>0x211：</h6><p>将文件上传到网站后，发现已经有很多引擎匹配到了，在details里可以看到详细情况</p>
<p>可以看到编译时间是2010-12-19【可以看一下exe和dll文件的日期，相差在一分钟之内】</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123103846810.png" alt="image-20201123103846810"></p>
<p>用exeinfo看这两个文件，都没有加壳</p>
<p>可以用<strong>detectiteasy</strong>查看1.exe的输入表，看到创建文件和复制文件（createfilea/copyfilea）以及搜索一个目录下的所有函数（findnextfila/findfirstfile）的导入函数，我们可以猜测这个程序可能会创建一个文件然后复制到某个文件夹下。1.dll的输入表里可以看到创建进程和睡眠的导入函数【ws2_32.dll是提供了联网服务】</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123112803267.png" alt="image-20201123112803267"></p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123113248321.png" alt="image-20201123113248321"></p>
<p>运行程序后程序闪退，开启<strong>wireshark</strong>抓包没有抓到，所以并没有通过网络，同文件夹下并无明显文件变化【.dll文件中隐藏了一个ip地址】</p>
<p>打开ida分析，应该是用lab01这个dll替换了kernel32.dll【应该可以在文件夹下看到kerne132.dll，但是有系统限制（win10没有】</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123114322202.png" alt="image-20201123114322202"></p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123155740170.png" alt="image-20201123155740170"></p>
<p>【可以猜测.dll是后门文件，.exe是用来安装和运行.dll文件的】</p>
<h6 id="0x212："><a href="#0x212：" class="headerlink" title="0x212："></a>0x212：</h6><p>将文件上传到网站后，有很多引擎匹配到</p>
<p>可以看到有加了upx的壳</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123145915934.png" alt="image-20201123145915934"></p>
<p>找了upx脱壳软件，重新看原文件就没有壳了</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123150625482.png" alt="image-20201123150625482"></p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123150719541.png" alt="image-20201123150719541"></p>
<p>接下来看看导入函数，kernel32中有可以猜测使用CreateWaitableTimer函数创建可等待的计时器对象，然后使用SetWaitableTimer函数设置计时器以及WaitForSingleObject函数来确定何时向计时器发出信号。</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123151014222.png" alt="image-20201123151014222"></p>
<p>【winner中有可以猜测是打开网站的internetopenurl函数】</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123160439581.png" alt="image-20201123160439581"></p>
<p>【advapi32中有可以猜测是创建服务的createservicea函数】</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123160530351.png" alt="image-20201123160530351"></p>
<p>【使用strings可以猜测是创建了一个叫malservice的服务，会访问malwareanalysibook这个网站】</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123161324560.png" alt="image-20201123161324560"></p>
<h6 id="0x213："><a href="#0x213：" class="headerlink" title="0x213："></a>0x213：</h6><p>将文件上传到网站后，有很多引擎匹配到</p>
<p>看看有没有加壳，通过scan/t按钮可以看到是fsg1.0壳，工具比较少，应该要手动脱壳</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123151306021.png" alt="image-20201123151306021"></p>
<h6 id="0x214"><a href="#0x214" class="headerlink" title="0x214:"></a>0x214:</h6><p>将文件上传到网站后，有很多引擎匹配到</p>
<p>没有加壳，可以看到有movefile,findresourcea等函数，还有writefile和createfilea，猜测是写文件和复制资源</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123152755628.png" alt="image-20201123152755628"></p>
<p>【advapi32.dll可以猜测程序会做一些和权限相关的工作，从字符串可以猜测从这个网站下载恶意程序，位置就是在system32下】</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123161610357.png" alt="image-20201123161610357"></p>
<p><img src="/Users/kami/Desktop/hexo/source/_posts/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123161758555.png" alt="image-20201123161758555"></p>
<p>用resourcehacker看看资源，不是很理解【这是另一个pe可执行文件，可以保存下来然后再次分析这个文件（可以将可执行文件保存为资源）】</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123153940389.png" alt="image-20201123153940389"></p>
<p>【将它save as bin文件，然后再放到die里打开，可以看到urldownloadtofile，可以猜测这是一个下载器】</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201123162708369.png" alt="image-20201123162708369"></p>
<h5 id="0x22-动态分析"><a href="#0x22-动态分析" class="headerlink" title="0x22 动态分析"></a>0x22 动态分析</h5><h6 id="沙箱："><a href="#沙箱：" class="headerlink" title="沙箱："></a>沙箱：</h6><p>在安全的环境中运行不可信任的机制，沙箱包含一个虚拟环境，通过某种方法模拟网络服务</p>
<p>恶意代码分析的沙箱：Norman和gfi</p>
<h6 id="dll运行："><a href="#dll运行：" class="headerlink" title="dll运行："></a>dll运行：</h6><p>恶意的dll文件通常在dllmain执行代码，无论dll什么时候被加载，dllmain函数总会被执行。</p>
<p><strong>cmd</strong>:rundll32.exe dllname,export arguments</p>
<p>export值必须是一个dll文件导出函数表中的函数名或者序号（前面加‘#’）</p>
<p>例如：runnel32.exe test.dll, install</p>
<p><strong>也可以通过修改</strong>PE头部，并改变扩展名</p>
<p>修改PE头部，从IMAGE_FILE_HEADER的特征域里擦除IMAGE_FILE_DLL(0x2000)标记。这样不会执行任何输入函数，但是会调用dllmain方法，也可能造成恶意代码崩溃或终止</p>
<p><strong>安装成服务</strong>：</p>
<p>例如：cmd&gt;rundll32 ipr32x.dll,installservice servicename</p>
<p>然后用net start命令就可以执行</p>
<h6 id="进程监视："><a href="#进程监视：" class="headerlink" title="进程监视："></a>进程监视：</h6><p>process monitor/process explorer:监控注册表、文件系统、网络、进程和线程行为</p>
<p>regshot：比较前后两次注册表快照</p>
<h6 id="模拟网络："><a href="#模拟网络：" class="headerlink" title="模拟网络："></a>模拟网络：</h6><p>ApateDns:查看恶意代码是否会发出dns请求，修改dns配置</p>
<p>netcat：监听</p>
<p>Inetsim：linux下模拟常见网络服务，记录所有的连入请求和链接</p>
<h6 id="数据包监听："><a href="#数据包监听：" class="headerlink" title="数据包监听："></a>数据包监听：</h6><p>Wireshark</p>
<h6 id="动态整体流程："><a href="#动态整体流程：" class="headerlink" title="动态整体流程："></a>动态整体流程：</h6><p>运行进程监视器和进程浏览器-&gt;regshot注册表快照-&gt;inetsim+apatedns设置虚拟网络-&gt;wireshark看抓包</p>
<p><img src="/2020/11/23/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201126162144572.png" alt="image-20201126162144572"></p>
<h5 id="0x23-静态分析进阶"><a href="#0x23-静态分析进阶" class="headerlink" title="0x23 静态分析进阶"></a>0x23 静态分析进阶</h5><p>计算机：硬件-&gt;微指令-&gt;机器码-&gt;低级语言（汇编）-&gt;高级语言-&gt;解释型语言</p>
<p>冯诺伊曼体系：cpu（寄存器，控制单元，算数逻辑单元（ALU）），内存，输入输出</p>
<h6 id="内存："><a href="#内存：" class="headerlink" title="内存："></a>内存：</h6><p>包含堆（动态内存），栈，代码，数据</p>
<h6 id="寄存器："><a href="#寄存器：" class="headerlink" title="寄存器："></a>寄存器：</h6><p><img src="/Users/kami/Desktop/hexo/source/_posts/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201201163409806.png" alt="image-20201201163409806"></p>
<p>用AH之类的可以取EAX中的值</p>
<p><img src="/Users/kami/Desktop/hexo/source/_posts/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201201163513378.png" alt="image-20201201163513378"></p>
<p>乘法和除法只能用EAX和EDX</p>
<h6 id="标志寄存器："><a href="#标志寄存器：" class="headerlink" title="标志寄存器："></a>标志寄存器：</h6><p>ZF：运算结果等于0，ZF被置位</p>
<p>CF：运算结果相对于目标操作数太大或太小</p>
<p>SF：运算结果为负或者算术运算结果最高位值为1</p>
<p>TF：用于调试</p>
<h6 id="lea和mov："><a href="#lea和mov：" class="headerlink" title="lea和mov："></a>lea和mov：</h6><p>lea是获取地址的值，mov是获取存在该地址的数据的值</p>
<h6 id="栈："><a href="#栈：" class="headerlink" title="栈："></a>栈：</h6><p>存储函数的内存、局部变量、流控制结构等，短期存储，主要用途是管理函数调用之间的数据交换，后入先出</p>
<p>ESP是栈指针，相关指令：push, pop,call,leave,enter,ret</p>
<p>EBP是栈基址寄存器，程序的定位器，在一个函数中会保持不变，用来确定局部变量和参数的位置</p>
<p><img src="/Users/kami/Desktop/hexo/source/_posts/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/image-20201201174659216.png" alt="image-20201201174659216"></p>
<h6 id="函数调用约定："><a href="#函数调用约定：" class="headerlink" title="函数调用约定："></a>函数调用约定：</h6><p>决定函数调用发生的方式，包含参数被放在栈上或寄存器中的次序，以及是由调用者还是被调函数负责在函数执行完成时清理栈</p>
<p>cdecl:参数从右到左压入栈，函数完成时由调用者清理栈，返回值保存在EAX</p>
<p>stdcall:同上，被调函数清理栈</p>
<p>fastcall:前一些参数（典型是前两个）会被传到寄存器中，备用寄存器是EDX和ECX</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>恶意代码</tag>
      </tags>
  </entry>
</search>
